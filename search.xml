<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用docker搭建cacti开发平台</title>
    <url>/2017/10/19/cacti-develop-with-docker/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>原来在安装配置cacti的时候一直感叹安装步骤繁琐无比，光是环境依赖就要安装很多个，而且配置文件也要改很多东西，万一哪一步错了纠正也很麻烦，很容易就又从头开始，十分恶心。但是程序装不好，看不到跑出来的效果，谈什么二次开发，所以装好软件算是一个必要条件，但注意力不应该放在这里。</p>
<p>以前了解到docker之后一直想自己搭建一个cacti的开发平台，给团队成员节约点时间，这几天终于实现了。最后的效果就是安装好docker之后把代码pull下来执行一条命令就可以运行了。<br><a id="more"></a></p>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>简介</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>官网这么写：Increase security, enable portability and lower costs in 5 days without changing app code.<br>增加安全性，启用可移植性，并在5天内降低成本，而不更改应用程序代码。</p>
<p>通俗来讲，同样一段代码，在win、linux和mac上可能跑出不一样的结果/效果，即使你都配置了所需的环境，在同样的一个系统平台上也可能由于环境版本的不一致导致不完全一样的效果，而docker解决了这个问题。它使得应用在不同的平台上所部署的环境完全一致。而且和虚拟机相比，docker的容器更轻量，部署更方便，性能更好。</p>
<h3 id="镜像（image）-容器（container）-仓库（registry）"><a href="#镜像（image）-容器（container）-仓库（registry）" class="headerlink" title="镜像（image） 容器（container） 仓库（registry）"></a>镜像（image） 容器（container） 仓库（registry）</h3><p>要使用docker最好先理解这三个基本的概念。镜像提供了运行容器时所需的一切文件，特点是分层存储，可以类比操作系统镜像。而容器是镜像运行时的实体，可以被创建、启动、停止、删除、暂停。镜像和容器就类似于面向对象中<code>类</code>与<code>对象</code>的关系，镜像是静态的，而容器是动态的。Registry就是用来存放镜像的地方，类似于github的repository。</p>
<p>推荐一个Docker基础教程<a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker practice</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>因为安装cacti需要很多软件的支撑：apache、mysql、php、snmp，还有很多php的模块（ldap、mysql、snmp、gd、pdo、session、mbstring、json等等等等），安装完还要配置。所以就把这些全部在构建镜像时做好（写Dockerfile构建镜像），运行时只需要安装cacti就好了，因为考虑到以后开发的需要，把cacti的源码放在容器外，使用volume将其挂载到运行的容器上。</p>
<p>数据库单独使用一个容器，另一个容器运行cacti，这时需要两个容器一起工作，这里使用docker-compoe.yml来进行组织。</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>在<a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>官网下载安装即可，win10最好安装<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Docker for Windows</a>（使用hyper-V，性能更佳）而不是Docker Toolbox。 </p>
<h3 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h3><p>有两个，一个是cacti的源码（用于安装及以后的二次开发），一个是运行docker所需的（主要是docker-compose.yml）</p>
<p>如果已经安装了git的话，新建一个空文件夹，在命令行下进入该文件夹，执行下面两条命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hunterMG/cacti.git</span><br><span class="line">git clone https://github.com/hunterMG/cacti-docker.git</span><br></pre></td></tr></table></figure></p>
<p>如果没有git，到<a href="https://github.com/hunterMG/cacti" target="_blank" rel="noopener">这里</a>和<a href="https://github.com/hunterMG/cacti-docker" target="_blank" rel="noopener">这里</a>下载zip包解压到一个文件夹下即可</p>
<p>现在你的目录结构是这样的（如果是下载的，把目录名后面的master去掉）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--work</span><br><span class="line">   |--cacti</span><br><span class="line">   |--cacti-docker</span><br></pre></td></tr></table></figure></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>win下需要先启动docker服务，双击桌面的docker快捷方式即可，成功启动后可以在任务栏看到一个图标（鼠标放上去可以看到<code>docker is running</code>），右键打开docker设置，把放那两个文件的盘设置为Shared Drives（volume挂载所需）。如果提示防火墙不允许，需要打开445端口，详细看<a href="https://docs.docker.com/docker-for-windows/#shared-drives" target="_blank" rel="noopener">这里</a></p>
<p>在命令行下进入<code>cacti-docker</code>文件夹，执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></p>
<p>就可以看到两个容器正在启动，在控制台交替打印出日志。第一次启动的时间较长(需要安装cacti的模板)，大约几分钟。</p>
<p>看到输出<code>[Note] Starting httpd service.</code>时即可在浏览器中打开<code>http://localhost</code>，直接开始cacti的安装。</p>
<p>注意在这一步时<br><img src="/2017/10/19/cacti-develop-with-docker/cacti-template-setup.png" alt="选择模版"></p>
<p>选中所有的模板；</p>
<p>最后点<code>Finish</code>后等大概两分钟，就可看到登录页了,默认用户名和密码都是<code>admin</code>：</p>
<p><img src="/2017/10/19/cacti-develop-with-docker/cacti-login.png" alt="登录"></p>
<p>第一次登录会强制修改密码，进入后开始下一步的探索吧。<br>关闭的话在命令行按<code>Ctrl</code>+<code>C</code>。  </p>
<p>只要第一次运行的容器不删除，第二次要运行cacti也是在那个目录执行<code>docker-compose up</code>，此时cacti是直接运行的，无需再次安装。  </p>
<p>若想重新安装，则删除两个容器和cacti目录下的<code>install.lock</code>, 再执行<code>docker-compose up</code>。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>开发应该把注意力放在写代码上，而不是安装软件，感谢docker。</p>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>docker</tag>
        <tag>cacti</tag>
      </tags>
  </entry>
  <entry>
    <title>Write blog with Hexo</title>
    <url>/2018/01/24/write-blog-with-hexo/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><code>hexo</code> to write blog with Markdown syntax<br><code>github</code> to host the source files<br><code>webhook</code> to automaticlly update the blog in VPS<br><code>git submodule</code> to manage the Hexo theme<br><a id="more"></a></p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Add a new github respository(name it : github-id.github.io).<br>On your PC:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install hexo-cli -g <span class="comment"># Node.js required</span></span><br><span class="line">hexo init</span><br><span class="line">git init</span><br><span class="line"><span class="comment"># use branch 'hexo' to store the source files, branch 'master' to store the html files.</span></span><br><span class="line">git checkout -b hexo</span><br><span class="line">git remote add origin git@github.com:github-id/github-id.github.io.git</span><br><span class="line">hexo new <span class="string">"my-first-post"</span></span><br><span class="line"><span class="comment"># write blog</span></span><br><span class="line">hexo g <span class="comment"># generate static html files</span></span><br><span class="line">hexo s <span class="comment"># preview the blog on your pc(default: http://localhost:4000)</span></span><br></pre></td></tr></table></figure></p>
<p>Config the github repository in <code>_config.yml</code> :<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:github-id/github-id.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p>
<p>Deploy the blog.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d <span class="comment"># push html files to the master branch.</span></span><br></pre></td></tr></table></figure></p>
<p>Now open <a href="https://github-id.github.io" target="_blank" rel="noopener">https://github-id.github.io</a>, you can see your blog.  </p>
<h2 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h2><ol>
<li>Add a webhook of your blog’s github respository(branch <code>master</code>).(url example : <code>http://your-host/hook.php</code>)  </li>
<li><p>Edit <code>hook.php</code> in your VPS as follows:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$secret = <span class="string">'blog'</span>; <span class="comment"># must be same as the secret you type on github</span></span><br><span class="line">$signature = $_SERVER[<span class="string">'HTTP_X_HUB_SIGNATURE'</span>];</span><br><span class="line">$json = json_decode(file_get_contents(<span class="string">'php://input'</span>), <span class="keyword">true</span>);</span><br><span class="line">$cmd = <span class="string">"./deploy.sh"</span>;</span><br><span class="line"><span class="keyword">if</span>($signature)&#123;</span><br><span class="line">    $hash = <span class="string">"sha1="</span> . hash_hmac(<span class="string">'sha1'</span>, $HTTP_RAW_POST_DATA, $secret);</span><br><span class="line">    <span class="keyword">if</span> (strcmp($signature, $hash) == <span class="number">0</span> &amp;&amp; array_key_exists(<span class="string">'ref'</span>, $json)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> shell_exec($cmd);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">'X-PHP-Response-Code: 404'</span>, <span class="keyword">true</span>, <span class="number">404</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit <code>deploy.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../blog</span><br><span class="line"><span class="built_in">echo</span> `date +%D\ %T`&gt;&gt; ../hook/hook.log</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git clean -f</span><br><span class="line">git pull origin master &gt;&gt; ../hook/hook.log 2&gt;&gt;../hook/hook.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add deploy key(Read-only access is just fine) for the VPS in your respository:<br>(The example shown below is for <code>apache</code>)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /var/www/.ssh</span><br><span class="line">chown -R apache:apache /var/www/.ssh</span><br><span class="line">sudo -Hu apache ssh-keygen -t rsa</span><br><span class="line">cat /var/www/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>Copy the public key to add it in github respository.</p>
</li>
<li><p>Clone the repository on VPS folder <code>blog</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">chown -R apache:apache blog</span><br><span class="line">/usr/bin/sudo -Hu apache git <span class="built_in">clone</span> git@github.com:github-id/github-id.github.io.git blog</span><br><span class="line">``` </span><br><span class="line">7. Test webhook on your PC:  </span><br><span class="line">```sh</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git checkout master</span><br><span class="line">git commit -m <span class="string">"hook test"</span> --allow-empty</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>Then check the <code>hook.log</code> on VPS or just open <a href="http://your-donmain-name" target="_blank" rel="noopener">http://your-donmain-name</a> to check the blog.</p>
<h2 id="Theme-–-submodule"><a href="#Theme-–-submodule" class="headerlink" title="Theme – submodule"></a>Theme – submodule</h2><p>Fork the theme respository.(such as <code>hexo-theme-next</code>)<br>On your PC:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git checkout hexo</span><br><span class="line">git submodule add git@github.com:github-id/hexo-theme-next.git theme/next</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>So you can manage your blog content and theme in two respository separately.</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ol>
<li>Apply a SSL CA on <code>freessl.org</code>;  </li>
<li>Download the Certificate files(<code>domain.crt</code>, <code>domain.ca.crt</code>, <code>private.key</code>);  </li>
<li><p>Install necessary module:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install mod_ssl openssl</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit /etc/httpd/conf.d/ssl.conf:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SSLCertificateFile /path-to/domain.ca.crt</span><br><span class="line">SSLCertificateKeyFile /path-to/private.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>Force HTTPS on all pages(Optional)<br>Config the <code>&lt;Derictory&gt;</code> tag in <code>httpd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$</span><br><span class="line">RewriteRule ^(.*)?$ https://%&#123;SERVER_NAME&#125;/$1 [L,R]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restart apache:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="After-you-changed-your-PC"><a href="#After-you-changed-your-PC" class="headerlink" title="After you changed your PC :"></a>After you changed your PC :</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:github-id/github-id.github.io.git</span><br><span class="line"><span class="built_in">cd</span> github-id.github.io</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">hexo new <span class="string">"new-post-name"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>webhook</tag>
        <tag>submodule</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>python errors notes</title>
    <url>/2018/03/22/python-import-errors-notes/</url>
    <content><![CDATA[<p>environment: python3.6, not tested on python2.x<br><a id="more"></a></p>
<h2 id="ImportError-cannot-import-name-imread"><a href="#ImportError-cannot-import-name-imread" class="headerlink" title="ImportError: cannot import name imread"></a>ImportError: cannot import name imread</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install Pillow==2.6.0</span><br></pre></td></tr></table></figure>
<h2 id="ModuleNotFoundError-No-module-named-‘past’"><a href="#ModuleNotFoundError-No-module-named-‘past’" class="headerlink" title="ModuleNotFoundError: No module named ‘past’"></a>ModuleNotFoundError: No module named ‘past’</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install future</span><br></pre></td></tr></table></figure>
<h2 id="ValueError-unknown-locale-UTF-8"><a href="#ValueError-unknown-locale-UTF-8" class="headerlink" title="ValueError: unknown locale: UTF-8"></a>ValueError: unknown locale: UTF-8</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>  export LC_ALL=en_US.UTF-8<br>    export LANG=en_US.UTF-8<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>install Tensorflow on macOS</title>
    <url>/2018/03/01/install-tensorflow-on-macOS/</url>
    <content><![CDATA[<p>This is a simple note for installing TensorFlow from source on macOS.<br><a id="more"></a></p>
<h2 id="Install-python"><a href="#Install-python" class="headerlink" title="Install python"></a>Install python</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install python</span><br></pre></td></tr></table></figure>
<p>It will install Python-2.7.14. Type <code>python2.7</code> and check the version.</p>
<h2 id="Install-pip"><a href="#Install-pip" class="headerlink" title="Install pip"></a>Install pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>
<h2 id="Install-virtualenv"><a href="#Install-virtualenv" class="headerlink" title="Install virtualenv"></a>Install virtualenv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv --upgrade</span><br></pre></td></tr></table></figure>
<h2 id="Create-a-env"><a href="#Create-a-env" class="headerlink" title="Create a env"></a>Create a env</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">virtualenv --system-site-packages ~/tensorflow --python=python2.7</span><br></pre></td></tr></table></figure>
<h2 id="activate-the-env"><a href="#activate-the-env" class="headerlink" title="activate the env"></a>activate the env</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tensorflow</span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure>
<h2 id="Install-Tensorflow-from-source-code"><a href="#Install-Tensorflow-from-source-code" class="headerlink" title="Install Tensorflow from source code"></a>Install Tensorflow from source code</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew cask install caskroom/versions/java8</span><br><span class="line">brew install bazel</span><br><span class="line">pip install six numpy wheel</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow</span><br><span class="line"><span class="built_in">cd</span> tensorflow <span class="comment"># the source code dir</span></span><br><span class="line">git checkout r1.1 <span class="comment"># up to you</span></span><br><span class="line">./configure</span><br><span class="line">bazel build --local_resources 3072,4,1.0 --config=opt //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line">bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br><span class="line">pip install /tmp/tensorflow_pkg/tensorflow-1.6.0rc1-cp27-cp27m-macosx_10_12_x86_64.whl</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Deep Learning</tag>
        <tag>TensorFlow</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>learn python</title>
    <url>/2018/03/26/learn-python/</url>
    <content><![CDATA[<p>Note for python functions.<br><a id="more"></a></p>
<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter()"></a><a href="http://www.pythoner.com/205.html" target="_blank" rel="noopener">Counter()</a></h2><h2 id="most-common"><a href="#most-common" class="headerlink" title="most_common()"></a><a href="http://www.pythoner.com/205.html" target="_blank" rel="noopener">most_common()</a></h2><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a><a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.sum.html#numpy.sum" target="_blank" rel="noopener">sum</a></h2><p>Calculate the summary of ndarray a according to the given axis, axis is a integer or tuple</p>
<h2 id="argsort"><a href="#argsort" class="headerlink" title="argsort"></a><a href="">argsort</a></h2><p>返回数组的排序索引（从小到大），若为矩阵可指定轴。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">2</span></span><br><span class="line">x = np.array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">top_k_idx = np.argsort(x[<span class="number">0</span>])[:k]</span><br><span class="line">print(x)</span><br><span class="line">print(top_k_idx)</span><br><span class="line"></span><br><span class="line">top_k = np.argsort(x, axis=<span class="number">1</span>)</span><br><span class="line">print(top_k)</span><br></pre></td></tr></table></figure></p>
<h2 id="np-square"><a href="#np-square" class="headerlink" title="np.square"></a>np.square</h2><p><code>np.square</code>是用c实现的，比<code>**</code>快多了😭。 661s:36s.</p>
<h2 id="np-linalg-norm"><a href="#np-linalg-norm" class="headerlink" title="np.linalg.norm"></a>np.linalg.norm</h2><p>求<a href="https://blog.csdn.net/shijing_0214/article/details/51757564" target="_blank" rel="noopener">范数</a>，L1范数-&gt;曼哈顿距离（L1距离），L2范数-&gt;欧氏距离（L2距离）<a href="https://blog.csdn.net/hqh131360239/article/details/79061535" target="_blank" rel="noopener">np.linalg.norm</a></p>
<h2 id="vstack-hstack"><a href="#vstack-hstack" class="headerlink" title="vstack, hstack"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html" target="_blank" rel="noopener">vstack, hstack</a></h2><p><a href="https://blog.csdn.net/csdn15698845876/article/details/73380803" target="_blank" rel="noopener">refer</a></p>
<h2 id="array-split"><a href="#array-split" class="headerlink" title="array_split"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_split.html" target="_blank" rel="noopener">array_split</a></h2><h2 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate"></a><a href="https://blog.csdn.net/garfielder007/article/details/51378296" target="_blank" rel="noopener">concatenate</a></h2><h2 id="np-random-choice"><a href="#np-random-choice" class="headerlink" title="np.random.choice"></a>np.random.choice</h2><p>生成随机序列，可指定范围或来源于某个数组。</p>
<h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><p>改变矩阵为指定形状</p>
<h2 id="mean"><a href="#mean" class="headerlink" title="mean"></a>mean</h2><p>求平均值，可指定matrix的轴</p>
<h2 id="fmax-x1-x2"><a href="#fmax-x1-x2" class="headerlink" title="fmax(x1, x2)"></a>fmax(x1, x2)</h2><p>Compare two arrays and returns a new array containing the element-wise maxima. x2可以是一个数。</p>
<h2 id="numpy-random-randn-d0-d1-…-dn"><a href="#numpy-random-randn-d0-d1-…-dn" class="headerlink" title="numpy.random.randn(d0, d1, …, dn)"></a>numpy.random.randn(d0, d1, …, dn)</h2><p>从标准正态分布中返回一个或多个样本值。</p>
<h2 id="numpy-random-rand-d0-d1-…-dn"><a href="#numpy-random-rand-d0-d1-…-dn" class="headerlink" title="numpy.random.rand(d0, d1, …, dn)"></a>numpy.random.rand(d0, d1, …, dn)</h2><p>随机样本位于[0, 1)中。</p>
<h2 id="xa0-n"><a href="#xa0-n" class="headerlink" title="\xa0 \n"></a>\xa0 \n</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'T-shirt\xa0\xa0短袖圆领衫,体恤衫\xa0'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out = <span class="string">""</span>.join(s.split())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out</span><br><span class="line"><span class="string">'T-shirt短袖圆领衫,体恤衫'</span></span><br></pre></td></tr></table></figure>
<h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a><a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" target="_blank" rel="noopener">list comprehension</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = [ expression(i) <span class="keyword">for</span> i <span class="keyword">in</span> old_list <span class="keyword">if</span> filter(i)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">'votes'</span>: &#123;<span class="string">'funny'</span>: <span class="number">0</span>, <span class="string">'useful'</span>: <span class="number">5</span>, <span class="string">'cool'</span>: <span class="number">2</span>&#125;,</span><br><span class="line"> <span class="string">'user_id'</span>: <span class="string">'rLtl8ZkDX5vH5nAx9C3q5Q'</span>,</span><br><span class="line"> <span class="string">'review_id'</span>: <span class="string">'fWKvX83p0-ka4JS3dc6E5A'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>votes = pd.DataFrame([i[<span class="string">'votes'</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data]) <span class="comment"># data is a list which element is dict.</span></span><br></pre></td></tr></table></figure>
<h2 id="np-random-shuffle"><a href="#np-random-shuffle" class="headerlink" title="np.random.shuffle()"></a>np.random.shuffle()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: x = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: x</span><br><span class="line">Out[<span class="number">27</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: np.random.shuffle(x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: x</span><br><span class="line">Out[<span class="number">29</span>]: array([<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h2 id="pandas-Dataframe-get-rows-by-index-array"><a href="#pandas-Dataframe-get-rows-by-index-array" class="headerlink" title="pandas Dataframe get rows by index array"></a>pandas Dataframe get rows by index array</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    x_num = data.shape[<span class="number">0</span>]</span><br><span class="line">    x_idx = np.arange(x_num)</span><br><span class="line">    np.random.shuffle(x_idx)</span><br><span class="line">    x_idx_train = x_idx[<span class="number">0</span> : int(x_num*<span class="number">0.7</span>)]</span><br><span class="line">    x_idx_test = x_idx[int(x_num*<span class="number">0.7</span>) : ]</span><br><span class="line">    train = data.iloc[x_idx_train]</span><br><span class="line">    test = data.iloc[x_idx_test]</span><br><span class="line">    <span class="keyword">return</span> train, test</span><br></pre></td></tr></table></figure>
<h2 id="str-clean"><a href="#str-clean" class="headerlink" title="str clean"></a>str clean</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">''</span>.join(str1.split()) <span class="comment"># remove '\n','\xa0'</span></span><br></pre></td></tr></table></figure>
<h2 id="pandas-add-a-column-to-a-Daraframe"><a href="#pandas-add-a-column-to-a-Daraframe" class="headerlink" title="pandas : add a column to a Daraframe"></a>pandas : add a column to a Daraframe</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_df[<span class="string">'cool'</span>] = votes[<span class="string">'cool'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="pandas-groupby-mean"><a href="#pandas-groupby-mean" class="headerlink" title="pandas : groupby mean"></a>pandas : groupby mean</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_df.groupby(<span class="string">'stars'</span>).mean()</span><br></pre></td></tr></table></figure>
<h2 id="pandas-group-and-count-unique-values"><a href="#pandas-group-and-count-unique-values" class="headerlink" title="pandas : group and count unique values"></a>pandas : group and count unique values</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">srcIp_Host_count = df.groupby(by=<span class="string">'srcIp'</span>)[<span class="string">'requestHost'</span>].nunique()</span><br></pre></td></tr></table></figure>
<h2 id="pandas-：SettingwithCopyWarning"><a href="#pandas-：SettingwithCopyWarning" class="headerlink" title="pandas ：SettingwithCopyWarning"></a><a href="https://www.jianshu.com/p/72274ccb647a" target="_blank" rel="noopener">pandas ：SettingwithCopyWarning</a></h2><h2 id="pandas-reindex-，-reset-index"><a href="#pandas-reindex-，-reset-index" class="headerlink" title="pandas : reindex() ， reset_index()"></a>pandas : reindex() ， reset_index()</h2><p>reindex() 是取出index为参数中指定的行<br>reset_index() 才是重置索引</p>
<h2 id="pandas-apply-也可用做遍历df的操作"><a href="#pandas-apply-也可用做遍历df的操作" class="headerlink" title="[pandas : apply 也可用做遍历df的操作]"></a>[pandas : apply 也可用做遍历df的操作]</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_character</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="string">'''去掉所有非中文字符'''</span></span><br><span class="line">    pattern1=<span class="string">'[a-zA-Z0-9]'</span></span><br><span class="line">    pattern2 = <span class="string">'\[.*?\]'</span></span><br><span class="line">    pattern3 = re.compile(<span class="string">u'[^\s1234567890:：'</span> + <span class="string">'\u4e00-\u9fa5]+'</span>)</span><br><span class="line">    pattern4=<span class="string">'[’!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~]+'</span></span><br><span class="line">    <span class="keyword">if</span> len(item[<span class="string">'content'</span>]) == <span class="number">0</span>:</span><br><span class="line">        item[<span class="string">'content'</span>] = item[<span class="string">'title'</span>]</span><br><span class="line">    line1=re.sub(pattern1,<span class="string">''</span>,item[<span class="string">'content'</span>])   <span class="comment">#去除英文字母和数字</span></span><br><span class="line">    line2=re.sub(pattern2,<span class="string">''</span>,line1)   <span class="comment">#去除表情</span></span><br><span class="line">    line3=re.sub(pattern3,<span class="string">''</span>,line2)   <span class="comment">#去除其它字符</span></span><br><span class="line">    line4=re.sub(pattern4, <span class="string">''</span>, line3) <span class="comment">#去掉残留的冒号及其它符号</span></span><br><span class="line">    item[<span class="string">'content'</span>]=<span class="string">''</span>.join(line4.split()) <span class="comment">#去除空白</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">data = data.apply(clear_character, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="jupyter-允许外网访问"><a href="#jupyter-允许外网访问" class="headerlink" title="jupyter 允许外网访问"></a>jupyter 允许外网访问</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook --ip=&lt;host_ip&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackintosh note</title>
    <url>/2018/04/11/Hackintosh-note/</url>
    <content><![CDATA[<p>Some useful tips for using macOS.<br><a id="more"></a></p>
<h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h2><p>破解后每次开机都提示访问通讯录<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo codesign -f -d -s - /Applications/Alfred\ 3.app/Contents/Frameworks/Alfred\ Framework.framework/Versions/A/Alfred\ Framework</span><br></pre></td></tr></table></figure></p>
<h2 id="Video-player"><a href="#Video-player" class="headerlink" title="Video player"></a>Video player</h2><p>自带的QuickTime Player不能切换音轨<br><a href="https://github.com/lhc70000/iina" target="_blank" rel="noopener">IINA</a>，<br><a href="https://www.videolan.org/vlc/index.html" target="_blank" rel="noopener">VLC</a></p>
<h2 id="根据当前输入法让菜单栏显示不同颜色"><a href="#根据当前输入法让菜单栏显示不同颜色" class="headerlink" title="根据当前输入法让菜单栏显示不同颜色"></a>根据当前输入法让菜单栏显示不同颜色</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew cask install showyedge</span><br></pre></td></tr></table></figure>
<h2 id="jupyter-themes"><a href="#jupyter-themes" class="headerlink" title="jupyter themes"></a><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">jupyter themes</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyterthemes</span><br><span class="line">jt -l</span><br><span class="line">jt -t onedork -T -f sourcemed</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Break the wa11 by v2ray</title>
    <url>/2018/10/12/method-of-break-the-wa11-by-v2ray/</url>
    <content><![CDATA[<h1 id="Check-the-time-VPS-and-your-host"><a href="#Check-the-time-VPS-and-your-host" class="headerlink" title="Check the time (VPS and your host)"></a>Check the time (VPS and your host)</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date -r</span><br></pre></td></tr></table></figure>
<p>Make sure the distance between them is smaller than 2 minutes. Different timezone is OK.<br><a id="more"></a></p>
<h1 id="install-v2ray"><a href="#install-v2ray" class="headerlink" title="install v2ray"></a>install v2ray</h1><p>There is no difference between servers and clients. They differ by configurations.</p>
<ul>
<li>Linux</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<ul>
<li>macOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap v2ray/v2ray</span><br><span class="line">brew install v2ray-core</span><br><span class="line">brew info v2ray-core</span><br></pre></td></tr></table></figure>
<h1 id="customize-your-configuration-refer"><a href="#customize-your-configuration-refer" class="headerlink" title="customize your configuration (refer)"></a>customize your configuration (<a href="https://yuan.ga/v2ray-complete-tutorial/" target="_blank" rel="noopener">refer</a>)</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>
<p><code>jq</code> can verify the format of json.<br>Or just test the configuration by v2ray itself:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v2ray -test -config=./config.json</span><br></pre></td></tr></table></figure>
<h1 id="Start-your-server"><a href="#Start-your-server" class="headerlink" title="Start your server"></a>Start your server</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray</span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure>
<h1 id="Start-your-client"><a href="#Start-your-client" class="headerlink" title="Start your client"></a>Start your client</h1><ul>
<li>macOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v2ray -config=./config.json</span><br></pre></td></tr></table></figure>
<p>Or use brew (auto restart at login) :<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew services start v2ray/v2ray/v2ray-core</span><br></pre></td></tr></table></figure></p>
<ul>
<li>macOS GUI :v2rayX</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew cask install v2rayx</span><br></pre></td></tr></table></figure>
<p>I suggest that configure the v2rayX manully, because the import method doesn’t work on my machine.</p>
<p>V2rayX will configure the system proxy automaticly, so <code>SwitchOmega</code> is not necessary.</p>
<ul>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.v2ray.ang&amp;hl=en_US" target="_blank" rel="noopener">v2rayNG</a></li>
</ul>
<h1 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h1><p>There is no worry any more about my study!!!😂</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>tools</tag>
        <tag>wa11</tag>
        <tag>v2ray</tag>
        <tag>privacy</tag>
      </tags>
  </entry>
  <entry>
    <title>android-auto-script</title>
    <url>/2018/08/15/android-auto-script/</url>
    <content><![CDATA[<p>Note while developing an Android script to auto comment in an APP.<br><a id="more"></a></p>
<h2 id="Floating-Window"><a href="#Floating-Window" class="headerlink" title="Floating Window"></a>Floating Window</h2><p><a href="https://www.jianshu.com/p/ac63c57d2555" target="_blank" rel="noopener">https://www.jianshu.com/p/ac63c57d2555</a> (Global)<br><a href="https://www.jianshu.com/p/95ceb0a2ed27" target="_blank" rel="noopener">https://www.jianshu.com/p/95ceb0a2ed27</a><br><a href="https://github.com/yhaolpz/FloatWindow" target="_blank" rel="noopener">https://github.com/yhaolpz/FloatWindow</a> (can only be used in an APP)  </p>
<h2 id="Decompile-APK"><a href="#Decompile-APK" class="headerlink" title="Decompile APK"></a>Decompile APK</h2><p><a href="https://blog.csdn.net/guolin_blog/article/details/49738023" target="_blank" rel="noopener">https://blog.csdn.net/guolin_blog/article/details/49738023</a></p>
<h2 id="adb-shell-input-text-‘你好’"><a href="#adb-shell-input-text-‘你好’" class="headerlink" title="adb shell input text ‘你好’"></a>adb shell input text ‘你好’</h2><p><a href="https://github.com/senzhk/ADBKeyBoard" target="_blank" rel="noopener">https://github.com/senzhk/ADBKeyBoard</a></p>
<h2 id="execute-shell-comands-in-Java-code"><a href="#execute-shell-comands-in-Java-code" class="headerlink" title="execute shell comands in Java code"></a>execute shell comands in Java code</h2><p><a href="https://github.com/jaredrummler/AndroidShell" target="_blank" rel="noopener">https://github.com/jaredrummler/AndroidShell</a></p>
<h2 id="CountDownTimer"><a href="#CountDownTimer" class="headerlink" title="CountDownTimer"></a>CountDownTimer</h2><p><code>CountDownTimer</code> must be canceled explicitly in <code>onDestroy</code> in a <code>Service</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (countDownTimer1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">    countDownTimer1.cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>android</tag>
        <tag>reading list</tag>
      </tags>
  </entry>
  <entry>
    <title>oneindex refer test</title>
    <url>/2020/02/16/oneindex-refer-test/</url>
    <content><![CDATA[<video><source src="http://gggg.is-best.net/?/Video/Movie/%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%AE%A2%E4%BA%BA%20%E9%AB%98%E6%B8%851080p.mp4" type="video/mp4"></video>]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>当你看过世界</title>
    <url>/2020/04/27/nothing/</url>
    <content><![CDATA[<p>..<br><a id="more"></a><br>现在每天似乎都有焦虑在伴随着我。<br>悲观，抑郁，丧，或许就是现在的我吧。<br>吃完午饭，刷个朋友圈，一个班的同学在知乎上发表了一篇NLP领域的文章。打开链接，读过文章，却不能领略其中一二，评论区也有著名导师、大牛师兄纷纷称赞。<br>是羡慕吗，还是嫉妒？不管是什么，又有什么用。<br>每天做着毫无意义的工作，没有能力的提升，<br>未来会怎么样，<br>当你知道你穷极一生也没办法过上自己向往的生活，实现自己的价值，你会怎么想。<br>是该妥协吗，<br>老老实实的做个平凡人，<br>你的出身没办法改变，<br>原来人在出生的时候就到达了顶点。<br>想这些又有什么用，<br>觉得活着太累，没有希望，<br>可你家里只有自己，<br>连离开的权利都被剥夺。<br>当你看着别人过着你想要的生活，<br>燃起过无数次希望，<br>也绝望过无数次，<br>没有意义。  </p>
<p>当你看过世界，<br>却发现世界并不是你的。  </p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>lesson from wechat group</title>
    <url>/2020/02/21/lesson-from-wechat-group/</url>
    <content><![CDATA[<p>有时候真话很难听。<br>大多数人是不喜欢听真话的。<br>说难听的真话会让人不舒服。<br>要学会在真话里添些佐料，或者不去谈论，或者换种方式。<br><a id="more"></a><br>想起来刚看过陈凯歌的《妖猫传》，竟不想在现实里真来了一回。</p>
<blockquote>
<p>到了片尾，空海说“通过杨玉环的生死参透了无上密”，白居易说“一字不改，诗是假的，可情是真的”。白居易也参透了无上密。<br>也就是说两个人都明白了一个道理：这个世界是由真相与谎言交织成的，我们要认识到这一点，不要否认现实。同时，如何对待这样的世界呢？接纳谎言，用力地拥抱真相。也可以延伸为：明白这个世界有残酷、无情、虚假的部分，但我不因此厌世，而是将这一部分搁置，用力去珍惜这个世界一点一滴的美好，这样就能得到内心的平静。<br>这也解释了那个抱孩妇人的事情。<br>空海问她为什么平静。她回答：“只要孩子睡着就好了。”也就是说，即使这个世界有惊涛骇浪，但毕竟还有美好的部分，我把我的精力全都用来拥抱这美好、品味这美好，自然无暇去为惊涛骇浪而惊慌了。<br><a href="https://movie.douban.com/review/9011512/" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<p>不同的人（尤其是不同年龄、时代的人）对同一事物（特别是新生事物）的理解能力是不一样的。思维能力和价值观也会有很大差异，所以，不要去强求别人去理解你的观点或者认同你的价值观。<br>如果想输出价值观的话，还是要好好考虑方式方法。  </p>
<p>真理总是掌握在少数人的手里，那些实在不能明理的人，不要去强求了。你救不了他们。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>使用shell脚本批量检查pcap文件头并修改文件扩展名</title>
    <url>/2020/12/26/fix-pcap-ext/</url>
    <content><![CDATA[<p>最近在使用一个数据集时遇到了一个问题，正常 .pcap 文件的文件头是 <code>0xa1b2c3d4</code>, 但该数据集中的部分 .pcap 文件的文件头却是 .pcapng 文件的 <code>0x0a0d0d0a</code>, 将文件的扩展名更改即可，否则用 dpkt 包处理时会出错。（具体原因见<a href="https://stackoverflow.com/questions/23523524/dpkt-invalid-tcpdump-header-error" target="_blank" rel="noopener">dpkt invalid tcpdump header error</a>）,所以实现一个脚本来检查 .pcap 文件的文件头并修改错误文件的扩展名为 <code>.pcapng</code>.<br><a id="more"></a></p>
<p>批量检查pcap文件头并改正的脚本: <code>fixPcapExt.sh</code><br>参数：放置pcap文件的目录<br>思路：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">遍历目录中的文件：  </span><br><span class="line">    如果文件的扩展名是否是`.pcap`：  </span><br><span class="line">        如果文件的前4个字节为`0x0a0d0d0a`:  </span><br><span class="line">            修改文件名</span><br></pre></td></tr></table></figure></p>
<p>实现：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fix wrong pcap file extention.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arg:  dir path <span class="built_in">where</span> pcap files at.</span></span><br><span class="line">dir=$1</span><br><span class="line">cd $dir</span><br><span class="line">for file in `ls .`</span><br><span class="line">    do</span><br><span class="line">    if [ "$&#123;file##*.&#125;"x = "pcap"x ];then</span><br><span class="line">        if [ `hexdump -n 4 -e '4 "%x"' $file`x = "a0d0d0a"x ];then</span><br><span class="line">            echo $file</span><br><span class="line">            name=$(ls $file | cut -d. -f1) </span><br><span class="line">            mv $file "$name".pcapng</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    done</span><br></pre></td></tr></table></figure></p>
<p>要点：</p>
<ol>
<li><p>if [ “${file##*.}”x = “pcap”x ];then   </p>
<p>${file##*.} 是提取文件扩展名，##是贪婪操作符，从左至右匹配，匹配到最右边的.号，移除包含.号的左边内容；<br>x 是防止字符串为空时报错；<br>这一行中的空格都不能去掉，会报错。</p>
</li>
<li><p>`hexdump -n 4 -e ‘4 “%x”‘ $file`</p>
<p> 用hexdump检查前4个字节，并格式化输出</p>
</li>
<li><p>name=$(ls $file | cut -d. -f1) </p>
<p> 提取文件名中的名字部分。<br> <code>cut -d. -f1</code> :提取以点为分隔符的第1部分。  </p>
</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用frp进行内网穿透</title>
    <url>/2021/01/09/access-a-host-behind-a-NAT-via-frp/</url>
    <content><![CDATA[<p>使用frp进行内网穿透，实现在外网访问位于内网没有公有IP的主机。<br><a id="more"></a></p>
<p>需要：有公有IP的外网主机一个, 作为 Server 转发内网主机的流量，可以自己买个配置低一点的VPS。</p>
<h3 id="在公网主机上配置-Server-端："><a href="#在公网主机上配置-Server-端：" class="headerlink" title="在公网主机上配置 Server 端："></a>在公网主机上配置 Server 端：</h3><ul>
<li><p>从GitHub下载程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">tar xvzf frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.34.3_linux_amd64 </span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>Server 端配置(tcp模式)：<br>（可以使用 stcp 模式给连接添加密钥，还有一种是 xtcp 通过 P2P 的方式连接，连接成功后不走服务器流量。但这两种方式需要在自己的机器上也运行一个 frpc，考虑到有时候可能需要用平板连，遂放弃。具体参考：<a href="https://github.com/fatedier/frp#expose-your-service-privately" target="_blank" rel="noopener">stcp</a>, <a href="https://github.com/fatedier/frp#p2p-mode" target="_blank" rel="noopener">xtcp</a>）  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> frps.ini</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash">dashboard_port = 7500</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Server 端:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在内网主机上配置-Client-端"><a href="#在内网主机上配置-Client-端" class="headerlink" title="在内网主机上配置 Client 端"></a>在内网主机上配置 Client 端</h3><ul>
<li><p>从github下载程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">tar xvzf frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.34.3_linux_amd64 </span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>Client 端配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = server.ip</span><br><span class="line">server_port = 7000</span><br><span class="line">login_fail_exit = false</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Client 端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可能需要在 VPS 的控制台上允许流量通过指定的端口(如该例中为 7000,6000)。 </p>
<h3 id="在自己的机器上连接"><a href="#在自己的机器上连接" class="headerlink" title="在自己的机器上连接"></a>在自己的机器上连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -oPort=6000 user@server.ip</span><br></pre></td></tr></table></figure>
<h3 id="开机自动启动服务"><a href="#开机自动启动服务" class="headerlink" title="开机自动启动服务"></a>开机自动启动服务</h3><p>上面启动服务端和客户端的方式随着 Terminal 的关闭进程会停止，当然可以用 nohup 的方式在后台运行，但如果重启机器就不会自动启动。所以根据具体的 OS 配置开机自启服务。</p>
<h4 id="Server-Debian-10"><a href="#Server-Debian-10" class="headerlink" title="Server(Debian 10)"></a>Server(Debian 10)</h4><ul>
<li><p>安装supervisor</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install supervisor</span><br><span class="line">sudo vim /etc/supervisor/conf.d/frp.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>frp.conf :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:frp]</span><br><span class="line">command = /path/to/frps -c /path/to/frps.ini</span><br><span class="line">autostart = true</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart supervisor</span><br><span class="line">sudo supervisorctl status</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Client-CentOS-7"><a href="#Client-CentOS-7" class="headerlink" title="Client(CentOS 7)"></a>Client(CentOS 7)</h4><ul>
<li><p>拷贝程序和配置文件并编辑service文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp frpc /usr/bin/frpc</span><br><span class="line">sudo cp frpc.ini /etc/frp/frpc.ini</span><br><span class="line">sudo vim /usr/lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>frpc.service :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Client Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动frpc：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable frpc</span><br><span class="line">sudo systemctl start frpc</span><br><span class="line">sudo systemctl status frpc</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a><br><a href="https://free-e.net/109" target="_blank" rel="noopener">frp自动启动</a>  </p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Markdown 预览和 lsd 进程占用 CPU</title>
    <url>/2021/01/28/resolve-macOS-preview-problems/</url>
    <content><![CDATA[<p>Mac 上一直用“一指禅”预览文件，但是它本身不支持 Markdown 文件的预览，所以用 brew 装了 <a href="https://github.com/toland/qlmarkdown" target="_blank" rel="noopener">qlmarkdown</a> 这个插件。但不知从什么时候起，可能是某次 OS 版本更新之后吧，就不能预览 Markdown 文件了。<br><a id="more"></a></p>
<h2 id="初现端倪"><a href="#初现端倪" class="headerlink" title="初现端倪"></a>初现端倪</h2><p>在 github 的 issue 里找到了这个 <a href="https://github.com/toland/qlmarkdown/issues/39" target="_blank" rel="noopener">issue 39</a>, 说只能预览 <code>.markdown</code> 扩展名的文件，于是我把 <code>.md</code> 文件的扩展名改成了 <code>.markdown</code>，果真可以预览了，看来问题是一样的。</p>
<p>于是我就往下翻评论，看到了有个老哥给出了下面的这个命令，重建 Launch Service 数据库，有人说有用，我就尝试了一下。结果马上就能预览 <code>.md</code> 扩展名的文件了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user ; killall Dock</span><br></pre></td></tr></table></figure>
<h2 id="节外生枝"><a href="#节外生枝" class="headerlink" title="节外生枝"></a>节外生枝</h2><p>但又一个问题出现了：<code>lsd</code> 进程一直在占用 30-40%的cpu，有时候能到 100%，过了一天（22小时）之后还是如此，用<code>Monitor</code>看了一下，磁盘写入量达到了 46G，这也太不正常了，于是又找解决方法。</p>
<p>然后看到了这个<a href="https://www.logcg.com/archives/3382.html#comment-109590" target="_blank" rel="noopener">/usr/libexec/lsd 占用 100% CPU 的解决办法</a>，发现有两个命令，一个和上面的相同，另一个如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /System/Library/Frameworks -type f -name "lsregister" -exec &#123;&#125; -kill -seed -r \;</span><br></pre></td></tr></table></figure>
<p>这篇文章说这两个命令是一样的，其实参数不一样。在 <code>lsd</code> 持续占用 CPU时，我运行了下面这个命令，效果立竿见影，<code>lsd</code>马上就不占用 CPU了。就在我以为万事大吉，准备收工，这篇记录写了一半时，我突然发现 Markdown 的预览又不起作用了，，，重启无效，，，</p>
<h2 id="峰回路转"><a href="#峰回路转" class="headerlink" title="峰回路转"></a>峰回路转</h2><p>正当我欲哭无泪时，我想到了 Finder 的一些插件经常会冲突，比如坚果云和 OneDrive 的文件同步状态显示插件就经常失效，需要在系统设置里的插件设置中重启一下才行。我就想会不会是和别的预览插件冲突了。除了 qlmarkdown 之外，我还装了 qlcolorcode 用于在预览源代码文件时提供语法高亮等。然后列出了一下 <code>~/Library/QuickLook</code> 目录，准备一个一个排除。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrwxr-xr-x   1 yg  staff    73B 11 12  2019 NSQuickLookPlugin.qlgenerator -&gt; /Applications/Nutstore.app/Contents/PlugIns/NSQuickLookPlugin.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B 12 16 03:36 QLColorCode.qlgenerator</span><br><span class="line">drwxr-xr-x   3 yg  staff    96B 10 22  2019 QLMarkdown.qlgenerator</span><br><span class="line">drwxr-xr-x   3 yg  staff    96B  2  4  2020 QLStephen.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  7 18  2016 QuickLookASE.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  2  3  2013 QuickLookCSV.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B 10 22  2019 QuickLookJSON.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  2 28  2018 WebpQuickLook.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  3 24  2019 qlImageSize.qlgenerator</span><br></pre></td></tr></table></figure></p>
<p>第一个就是坚果云的，其实我首先想到的是quicklook插件似乎是在 <code>Info.plist</code> 里声明了 preview 的文件类型，在这里还有一个冷知识：</p>
<blockquote>
<p>Launch Service 是用于将文件类型和打开该类型文件的程序关联起来的。<br>macOS 中的文件类型并不是靠文件的扩展名区分的，而是文件的 <code>kMDItemContentType</code>,可以用以下命令查看一个文件的类型：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mdls README.md</span></span><br><span class="line">_kMDItemDisplayNameWithExtensions      = "README.md"</span><br><span class="line">kMDItemContentCreationDate             = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemContentCreationDate_Ranking     = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemContentModificationDate         = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemContentModificationDate_Ranking = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemContentType                     = "net.daringfireball.markdown"</span><br><span class="line">kMDItemContentTypeTree                 = (</span><br><span class="line">    "net.daringfireball.markdown",</span><br><span class="line">    "public.plain-text",</span><br><span class="line">    "public.text",</span><br><span class="line">    "public.data",</span><br><span class="line">    "public.item",</span><br><span class="line">    "public.content"</span><br><span class="line">)</span><br><span class="line">kMDItemDateAdded                       = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemDateAdded_Ranking               = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemDisplayName                     = "README.md"</span><br><span class="line">kMDItemDocumentIdentifier              = 0</span><br><span class="line">kMDItemFSContentChangeDate             = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemFSCreationDate                  = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemFSCreatorCode                   = ""</span><br><span class="line">kMDItemFSFinderFlags                   = 0</span><br><span class="line">kMDItemFSHasCustomIcon                 = (null)</span><br><span class="line">kMDItemFSInvisible                     = 0</span><br><span class="line">kMDItemFSIsExtensionHidden             = 0</span><br><span class="line">kMDItemFSIsStationery                  = (null)</span><br><span class="line">kMDItemFSLabel                         = 0</span><br><span class="line">kMDItemFSName                          = "README.md"</span><br><span class="line">kMDItemFSNodeCount                     = (null)</span><br><span class="line">kMDItemFSOwnerGroupID                  = 20</span><br><span class="line">kMDItemFSOwnerUserID                   = 501</span><br><span class="line">kMDItemFSSize                          = 2550</span><br><span class="line">kMDItemFSTypeCode                      = ""</span><br><span class="line">kMDItemInterestingDate_Ranking         = 2021-01-27 00:00:00 +0000</span><br><span class="line">kMDItemKind                            = "Markdown"</span><br><span class="line">kMDItemLastUsedDate                    = 2021-01-27 03:35:22 +0000</span><br><span class="line">kMDItemLastUsedDate_Ranking            = 2021-01-27 00:00:00 +0000</span><br><span class="line">kMDItemLogicalSize                     = 2550</span><br><span class="line">kMDItemPhysicalSize                    = 4096</span><br><span class="line">kMDItemUseCount                        = 2</span><br><span class="line">kMDItemUsedDates                       = (</span><br><span class="line">    "2021-01-26 16:00:00 +0000"</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>所以我先检查了 <code>NSQuickLookPlugin.qlgenerator</code> 的 <code>Info.plist</code> 中的 <code>LSItemContentTypes</code> 的值，但并没找到任何与 <code>qlmarkdown</code> 冲突的部分。所以还是直接卸载坚果云试试，反正现在也不用坚果云了。</p>
<h2 id="万事大吉"><a href="#万事大吉" class="headerlink" title="万事大吉"></a>万事大吉</h2><p>然后， qlmarkdown works fine❕❕❕😭</p>
<p>此时此刻，我只想说：Stupid software。</p>
<p>或许这篇记录现在可以改名为 <code>坚果云引发的惨案</code>。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/toland/qlmarkdown/issues/39" target="_blank" rel="noopener">qlmarkdown issue 39</a><br><a href="https://www.logcg.com/archives/3382.html#comment-109590" target="_blank" rel="noopener">/usr/libexec/lsd 占用 100% CPU 的解决办法</a>  </p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>shell</tag>
        <tag>qlmarkdown</tag>
        <tag>qlcolorcode</tag>
        <tag>preview</tag>
      </tags>
  </entry>
  <entry>
    <title>Get newest code from original repo</title>
    <url>/2021/02/04/Get-newest-code-from-original-repo/</url>
    <content><![CDATA[<p>Clone 开源项目后，在本地进行了修改，并提交到了自己的远程repo，如何从原 git 仓库获取最新的代码并 push 到自己的 repo。<br><a id="more"></a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>从 Github 上看到了一个开源项目，想自己部署，但是由于项目代码中的配置文件需要某软件的账号和 token，而原仓库中由于是开源项目所以是一个公用的账号，而自己部署的话肯定还是得用自己的，这里我选择使用私有仓库，一定程度上防止 token 泄漏。</p>
<p>因为 Fork 后的仓库不能设为私有，我只能先将代码拉取到本地：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Stitchpunk/atari-ai.git test</span><br></pre></td></tr></table></figure></p>
<p>在 Github 上建一个私有仓库，如：<code>test</code>.</p>
<p>在本地仓库中将远程仓库 <code>origin</code> 改为自己私有仓库的地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v <span class="comment"># check remote repo address</span></span></span><br><span class="line">origin  git@github.com:hunterMG/test.git (fetch)</span><br><span class="line">origin  git@github.com:hunterMG/test.git (push)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote remove origin <span class="comment"># remove remote repo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:hunterMG/test.git <span class="comment"># add remote repo of yourself</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master <span class="comment"># push code to your remote repo</span></span></span><br></pre></td></tr></table></figure>
<p>这时候就可以在本地写代码，提交到本地仓库，再 push 到 Github 之后结合一些 CD/CI 的方法部署了。</p>
<h2 id="原-repo-更新代码后如何更新自己的repo"><a href="#原-repo-更新代码后如何更新自己的repo" class="headerlink" title="原 repo 更新代码后如何更新自己的repo"></a>原 repo 更新代码后如何更新自己的repo</h2><p>几天之后新的问题来了：原开源仓库更新了新的 feature ，我想加到自己的仓库里，因为不是直接用 Github 的 Web 端 Fork 的仓库，所以不能用这篇<a href="https://www.cnblogs.com/gqzdev/p/11900362.html" target="_blank" rel="noopener">Github中进行fork后，原仓库更新了如何与原仓库同步</a>里提到的方法（直接在 Web 端发起 PR 从原仓库更新）。</p>
<p>然后看到了这个：<a href="https://juejin.cn/post/6844903761593237511" target="_blank" rel="noopener">GIT - 拉取其他仓库的某个分支的代码</a>, 感觉差不多，试试还真行。</p>
<ol>
<li><p>添加远程 repo，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add Stitchpunk https://github.com/Stitchpunk/atari-ai.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取远程 repo 信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch Stitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建并切换到分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b mergeStitchpunk #or git switch -c mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并最新的代码，解决冲突：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge Stitchpunk/master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="更新自己-repo-主分支的代码"><a href="#更新自己-repo-主分支的代码" class="headerlink" title="更新自己 repo 主分支的代码"></a>更新自己 repo 主分支的代码</h3><ol>
<li><p>切换到 master 分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master #or git switch master</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除临时分支（optional）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>不过现在看来好像可以在第 4 步时直接切换到 master 分支，将代码直接合并到 master 上。😂</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/gqzdev/p/11900362.html" target="_blank" rel="noopener">Github中进行fork后，原仓库更新了如何与原仓库同步</a></p>
<p><a href="https://juejin.cn/post/6844903761593237511" target="_blank" rel="noopener">GIT - 拉取其他仓库的某个分支的代码</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424" target="_blank" rel="noopener">创建与合并分支</a></p>
]]></content>
  </entry>
  <entry>
    <title>家庭琐事</title>
    <url>/2021/02/03/something-about-family/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f4ed7df9f5b2705499c10dcb5e08188e33a84328bdba65ed242a355e429015e6">9d8506ba4f559e0e73a966f9e14f94f1498f8c166a12e2050e714d42cca1af49685ad423685ae6942c7f3a6d32e161a0926c88257c54040cf17a64ec6ef814794fc46b7b188bae895d37504b7e4dcd0f4f0827d1378a54b1b97248d7f7fb32448348dd2d1346c7ac8fda21f6485f0d49dd3026c4a6dd0260e00b5d4a1277bd02e95ef694c555cd8c816699f2c7428fca991cae59238f1d0c0a7dfa740fb04f346e8e7935fc5bd29444d74a53be8d23a0b59350dc22c63e70aa53c063ab5541d98619f92b225298977f56a826755dbdc9415ba694ea6f5dacc544c718c35814cf12eea1805c7f08b84f745b32b6da93c9e52bc97bf77fdc94ea37b28f77694b2ed8d7dd10c128e8ad27837f5bcd00e755238ecd973554950441d5fcc868f585784d628faebcfcfb040aed9fe2ae9229c2401a41069e91547d3c6984ddddca00a3aef8577771f7046ebb8273b3df76884838c5426f7e1c4b99dd3d9ffade7a0b27ab3475930475dc757545a7433b954a797086162814e63f5455cd74253ac0248e2c5dc53a84d1ff9502ebf29b992b761f2a94932edca068b63fc0d6aed6eaa4b59f8e1de4f25298cc857e812feea700548285173965326a7bca99b550f8015cf335008d367b6038fe4f8e22118bcdbf70e666cfc61ea3b251d0739ad63eaee7731bd55ce5568810475fa9558345c3b12444025940ee3f3f0d1dedd1acbb10f35acdadfa96ae7939116bb303cee4ab67cfbb6073740f671a90ec867310fe88c0497e1f29991e8379fb5a11053c99c116037336640331fcf600a90be4dafa58206ab7a7fc64a7d7ee42adf171820ffa5f72edc569c327eb364a2b90c2db86392fd837127c25b692864ef29fcaf1512a0af4ac051c05076ed63fd5811e38e859efedcfcb25e5b615ccbcadefaf3cc1ca6875a9a87e71611ec2aa55ce23d16ad2465dd40fbc78e8e3c26d9589f04093eae3363a6952c18cf3b6d1d4a6b835628171b85434a8288ec21782a051d0933e3a7747b8b549f393b8e15fc8d3cad36ef941d08cd870b8ada685adecffd24e96b271bf6e3366aba6bd4fbfcb3d3a8b1ac47f0e2e672a7c51c6c18b4336e3908375f6d3ce9e50ff43424539c4241e015c19e22e77164b8d13024e85bf6b75e8d613d2c485a1b5ed17301220ac4ca1983b6c000efd899b9fce51d3fc6db7ad8f4f35a742d8328338fd34e82b8247dad35ec77e5e7eaac965316be7a157990a37eee8ae5ce8112015552a93e32b5c5a75a6c5852440b1a2e589eb0fcbbaaba89fa48f15a23884b0f4cea74c53d6c95d26f3b52232bebf29e533ecbef40c100e207790a7662bfaab90041114b2b17108d60e12a9fb92b57e3843d6927d813185e8f757f2da1353da556a0061c38d7dff93c8fa43de6ca44bbae130bfa0bd5197db78ce87a79f793417267e7a19db6e55c740b1973f4c40fba0b4fad9b21252c29ee72b48e3b01a7ba75ca77888c1ad841bb2c4d01e3c5943c5f79e89c3f96087be2b60bf8986024c26848ff7161360efac82f494321e16a799b6952cb3a51f5c1cef7dadea1763785a087cc20d4060a879110a588e12dbea24f1904b9a76fcea64f8aa0a6a5572d706a192070d84cb97e267e82ec47a4c3e2209bdea7c6981c5756f005c76a4074f481ad861a6dbcd4e24f59a2223ced99dfd576f8e5171897a5f8b7de507ef65bc5c5b91478f882e01563fa7b702f210b8ec566bc02461ce25a245b014cdc1e00ace6df9db9db2dbb8f48e300fa3a8cca41c49a68a832a21b9fdaae93a40853d003260cdcbc8c4a84e58282cbc58365afe02eff976265f9ffdfb0d69b39dd68483c2f36b9410c496e188f9cebe3021fd315cb81ecc12c965974e7b35dcbd7c1dee721bfa1e19565b37de579e19c8c3039cd86ed11f2580a3a6a910bec120a491010db2ad8c3e42a00b42995b93db0bfb97aa12b04d5cf4190376cfdfa73c1480ffece2dfb5820a4e702602bfd47c40bb0e71338006ee534635fef3d15356f23d0e4904beb03a0ba27ea2785ad60db1af7313867e6baf3f1304533b24337d01c4942d345e772dd6dd6964a4ac2179bc86fe163c1d98dba131e8a366779f1be168d1e1367b3ccd40202cf467eeef67f279679496730aed5c68ebf25ce771d8c05a76ecb5b6c9eb1c7af165e632d45f6981d302b8227c9f28e50f98bd785ed3223909afe1d76f45018a45610222ec3b38cb98d09d06ea033b9b35476caadcef7da8cf07238f39d949c02bea88e516f7026501577748b5dff18bf2726ecda55d8a6d054fc6675d80577b23adb387a5538fcc051c29bab8e23bdbdf8fd91746edb346ab00ca2bafb4ef452117adbf1fc71f5b9973f9d63e354cfcb5e2a051cea0daea9eb3006d47bc058ce6be6f421c8df21888414c253b4abca8d9080f3dba0f449fd6926d9ab8f1b2b3016305c232329fb299e1ef2a45ba36cca797f471c49ab27b5892dbe52709d8d382eb417c393be984e82f43aeb62160ec3ae052c3c8d352c6e34e81c343cbcbde47c5f8eb55ebbdf9a12f8b62c12f9d6aedbb2d68531a69006f07fd4aecc3405704b93f2bc4146a80898fe45d18ab05b88136b880c13f428dd1387b0ced06e20b814c22d2bd35bdae65a43ac4773699c0f9b4617909945e17f663f1a79c53b418e82b8cc77867fecb0c48d834e1b6197b46ee6377f6bd22bd88d983038edea0f4c9066c765009325db582bf1141916d9f2855134b094f7f5b581ddc1421e1cf3b1602f58b74b329cd0859fd48e2499d377a884bb6f5b9c2d59ad880e615ebc9eeaafae4f0bd53ade19adf9befc71cfcb0aac16b200498a3ca5d0c2fc509dc0c5aa9e810fd95d64f1e30c57697dc334cd810834d72212a2d3ff7ee19280ce05bcf014649938214602306d19f45f75ad62a6427e39f8e69d6ef1bcf612eb19b060c1bf2325d4403aa327458c684da60d618cd12805d0efb674a50c2b958a1ae19ce3911d3c3cd3dccc4ef435d2ce83a5d5395cb8b882681579565f2bf2cd5e283742259b29e83f677cfda0ddbc5cd92f413150d8b6782877fbf9ee6405bc6cb5efec1184878128d5657e2087042f75aa8cfe987af4db3e199ca6a4e0d1747197c729f5a12fd79524d08bbf521f6fd601750af26ebd5b71f9bc24764e46d2bb4d8b12a4075ff7aa8c9273918ffc8f9a507beae2d09f8d44b74590e8a5d90e7872e69622199e4edad9f9fa9cf27951cd107a672a4a9b0072c042a7a50be8fc6316e31b034e1b5be1b5c7ea0053100b752a142d80a70e2380730479a824f430a0be0c7afe18f02e1b8bd2926804cd238147ffeb2891e31d67b67e4fca1cb1b66b92280a86bd04c7e198fc17d374dec044e0809586ad68ffc6a5d6273f315a502aad4bd5ea86e1406f4b4f7b8a45653f0984bf5ce4de1c93f11c44373ed82a9b1816e0890180b193efa1ecde7f2b06d1c5efd480ab34904f30b7a8eb676c7b1ee9b059d353180d73ba55dfc5b1f242407de16e9807a8faaf5f3d2a9173bd3fdee31750af0c613f64d687e301bf218da9347638c50a3f1b9784722bb6b40b5a1a3c1e50014c5f1c2e1b9f2a78b9e731d8cf114c4462c993e33738a5c1e7fa474ca72b76327bb9821092af72c30383488610a48eaeba85202e47c07460e280da87c5b072d33b23adffa58d246aa913eff87490db3d0e426d68effcb45ae1fdb061c4658f69bc7a526d435b76b1767d541737d56972b18abeebe98d2d8f6ec93f21025b30616e584bc9c321114298ebf1ff1d383297c627566488e729a1b5c793f1caf861065d4ae43e9b1941309a9eb5c41e49430452d10568d5579c52daabbf03b81b7941dd1531559b56a5fdf465c338cc433ee7d38ca83271f34be3485adf485508d972bfbd70cbfb3a99aa078ee181776f8bd93a224e15c842000a16c70a792a0458247d364ec4f0788b6e26a269bac938867ebb2d58e585291bb2f2fe827faa4229b11b7817994f2421d7378823aec3ea90aecd140cda4286e4769ab8d3f65cdec6bf175afe4b052e4dae1f87b2467a484ebc8d4d71889785c8ffcaa3c0c1200996de3bc4d9a1c92adf38644441b40f57e154d6ba9a69e86ea8b5292d9df6fbe54d1077cca20bf028779a4b6a6e79cce9744f0db54425f209a5a4fe595c650dd5be41f3dbfde78c59b577c71e92b6edaff16d434dd91fd1b3af8d852a06a12a0e0c1c80c781dda876a01c654c25ba86a25a8413d5cbebba72152e11b43845a256f0ee6ccfbe17e4e7e853b9e04b5346093e8183a66567bcf7ccaa2e64f9a8096d8c5daea6f26cf18e8457ebc12c10a0ddc1ff7545989ebd685ba58f743fca112f06f9cb95d2d0c85898fdf2a010965221e0b7f87d59fa529375cad4870275025ce4950efa1043eb4f836073733c013acfa2f7691075ffde9bfebef4d8c33239811f488679e7955829606b99433040418c6d9a2042b4b7663cb5f6f4e903cde2f5e8f68ecf55263d2a67b5a3522a6c391b5ac2082406b087c2d16d2d095920217fd881abf8490573cf441556d4345e13f6e415fedf62337e9539575dc974f09e9baba6a38096843976a544687902b334d9a2f9f1d4979cf1a90f88fc3e6ea6b3e48d7529ae806f6ae2b1969c53fa4a7095580f1050343504f3e7d6a366a5d31d5c490cce04581d649c92ebef8894dc97ab9f90fd8ab3ae258e33208fb20d20f703ace936762f72f549dc916b297efb589298665a2a7ac5cf130a5b7650c56bf8679b3e6c4ff400b94481ed476f09f19156a2584d337092c5b2a96126bdec96fb248653ffc5c784fa19fd88b8183867f7a418cb9acf4f3b8dad0a975dd78b8981603bc9064cc1f7d4043535be0f4c20e1a5bbd8ff2b082dc1ea66e0bfbf8c41895b13e85f3b1faf901a68e9155819d033abe22a6316553a06b851d785280c4c08d004c1c17f36e6050a45c4e4bc38bb52af2b2446f87132cfeeed24663fc478eebfad86309e60beb8cd5d645654d5549e76c31c1ec26d42493e04c50842bee9a4f1d0c86a75e2a699c4b1311c89e0d648694ceb45d9084b5ce97a86ff92fbe55aca8b7da32d5242f07710b4336da1453b2704c20732261759940a544dd71a76fbf6db6252b25cf4f7926790350776226fa2b8b179929bd007364aa2c79ed628edf85484585e6a8ba2a60de98cb964defd9b799b67f90346b4af7328e35f6c78a2976b7f70132288b1fb80b73291bd6b73f87f3f87e0733511570f34a3e3b3a79bac867b7563b334de462657b3a4f13856272d0c9359d0849f643781044621337d709abd1147322626a7482a307f107037cf98f232cf66fdc8b2f5460ad2075f6940ceeb092fae5be71adc860a1ad417e8bee86af9653707721df17576e60e481337995e958595bfc954b8ddc123931cf507ec24dbc99af339b2f7a304cc9c8752b769c84cf9ac2942a0e68f3e6de8794f500cd29ebbe77ca2a1705257d0dab3b52ad37a00fbc4ae2c12be83618a6661f0fb639ad0679910caaf17fb2476b4e7476ab8eb332c5eb507e00448a4b4a220c20e6c8bfa54842a1a0292fb99ecd48b8fca1690f7292fdf32b134a47b36262081e44ac08cbd0aba9614cb350ae103df6f6d60153ae7130f1536ce3f1ecc5459bb1a3f7a0409072ad0ac7887f5e9695d2a3c5e77bbc7fc21d384f4ed10f87cc9f68dd9623b9d43158f0b09cc9a937e9eb04ab9c7b85e41b3b70b4198b554b8def19231c2b3882777efc0d4e6f3c5803612621a51d802a0baa1596a75927b87088b69c00caf70c3710c52fd367b3aab027d72757f1c9dce915b2368dead627e308787f5936e9f9de68614c2486bbc363b055fa53483ee5f67ee1b3bf74c6d75cbb9ce285ad733eebbda6f8befe68b488575bc478a24101aadaa117d565428e0e714cbc5090ca30609dcd2a9344ff9830c61e5c7e2eb2f88e9357e0e635b3fcf2bf5f972c57a7b8c7478addc0f7505469f95cefc8a84318bc64023290e1faa3688d5cea39bb7c3104e76dd1d61bf95f9699d0136a4eecc98b408430e8c1059ba3a8396c3ebdbc53d06ea7e38b822270906a2d1c85096d9b53e6fc3b02424b32cdb3d7e08af0470855dd7cc0c659e26f198e310e19c299601e2bfbfcb4c0776d02c3ad3d19e98dff0addcdf49d61aa9e3c81bf4ede3128158f3e1b7543e8e7ea831ac8c148ca347cfc7337f9d9b25ca7265a52bd65d7508c494dfb6b6647e3596584c9ff8a4064dd2edb5695303e43a73639f2f10706f387d88cb05324250ebb89ce3aee6d6b5d119ad9f83a98bfd00e3247b7708ef0152f81b2c605d703163edd30b6fdf6a8e0c084e33cf12182d202bfb7f8e0e0939fe430c964953b5ca1b41004024592db29c0b981554f3903e5b7bdee7f2d01a0d2cf7791abbbdcda548dcfee0911eb62d75f83bb76b02310c1e35629fe822882ceb1cb9e16b5313bafb7b9f18fcbf7e295c6f7357e3389bbefe742baa89da6d5b6f7503e1691e0cfecb3a1b0dbd333aac89aea491571a9e4d429ff5bc537f99a9f527da05a58ab97fb6c11bab75dff15a5f8aea9a1accc7cfe8a41c495d82ff11e5edbc601a4f91e130f451adc24a33fb48a6766d095e12f6bd8c4d099cf1002e7892c5310236b75f4a098aea521ce208aae6d286583dc4dd634c1ebd84af2013b0726748d4283c877ae17c28ee8b90d451cb252d9162876d74f5a81551deb68d524ce262b60004412d97036d390dcb3675b89b51d9b1053c816b69bd03af2b147cccc315174bd559cf976e6cc4e5c5f8c852b989a1c2332898f520478874dbcaf3a1bb9db4023da018bf745016104702a46c592665bbc1e0d30d48ca79ff3422f4c5697852505fe5e0ef4fbac8e750088f2c17fdeb908ae420d0708db6bf0a57412c7b7db6f1e556cad2e03a7818e5e792fadaa677a86c78616bde498868522809803eb320aad736f5b17533c94d6b58e21b834cad7c4aeaaab6c017cf210bf8d74eb30880687433f7c61049276ebfa1b69855ff8bb37f3ecdb9c2fbea52ad32f2eedef6ec864d06bce56965315a8de468a4bc5214b61a8787dd7f660c664488a8e4730dbb36320b23bfa1c6378fe22f7cd1638237b41c15fe996ffbc73200aadb13235ad9c48c3d3a6303c9cca7814602367884657b6bf17fc629875b582c273f3cfb1eccb8d2b401661c2f92dc6c5d72786af092f1abd62a90b4b75f35346f67ffcdf32be0479fdd518b596ca6a6f07e2c21541f31c150e66628d84fca5780d7a5d09ced2905ed861be020c77a8222b2c06dfeccf0bba8cdc1b02db3a55673ff3b1c3117f61a3e1338040133277e9f0190b5733143946f4d9bf36acdbcf1374fa4aafbff516eb4c4601062eb56ae6cdd8ea42fed9ba24a5983838d9240f92081b9716a25db3a7494aa34f8409a4586036f1465016e813bfaaceae3f10955236baf75f6a4c1d29fbdfa6eb1a5fec2c167ef27b78e33681fbf076a951b4878ac29a6254b0f064d6361ef2dbcf6e142f748a6dfb497f05ac975cdf83ba721c6ee57ea072e285ae833f34962ed3b7668e7a99b70c660d4ae045b6a049ed394bbfadef2027820fcf5d05d6cc69ebe04633271ddd1259f9bb258bbab5ff56396f2bccbad9e3db4e7565d4d4594eb2a1e86017eaf170cb1101e37617ef08ab32f74360a5af53294e8c5237878ea6a27026f48caf37e84e6ed70b9f24c7bf0a6d3685f155ec6da971147248afb3241adc1bb0006211fd188951551c6abf165469c8e4a780e4b7c49097f6cb9d3e5f04bad73870031a37283f2c8b13500c104636c790c21f7dbc648237aa3ee683109480c281966aadab807c657637492805a43429f5bba00fde4b1db3367b13fdd66ae89869caed58b5bebd57ffda4565a9b4fcb0ec3d6507811c485926da72f09f94b2c7e131aecad03a0463168aeb5782afd9bae73337f3144fef1c6b08df2ec45f6eb7db1b10662f6c36894444f232b7c38f8c5865dce5eca9e95737674bb6922ba00a1a6abd8c28a676a19805d482e38fef4bd314ac6f312551ce7ee243213b6c4520f613e3a337fdd66eca8bcc9a0a8814a2fdcb38754ab400cc677dfcc0bd087a89b89d5eb01d4ae5b1edc29cbfe14178c19e09d964094e5b748a53982f80003b8f78ff6aa49431551d0acc17d4cf5b50de9241ab505dced4eee9d274530bcb1161f586e13aeff6fe3304a41ff0eae6073f150b2371477cb00e84fc898358b9faa9ded1e8acb9b9f5cf0bdfd2cdfd84435cf4740a4c0e09ad6f8e8bd0b958b5bbe7c77f55f91dc8359387fbb32cbe0530a126aa33340e87740711a5be33a4d64576c4b13eb0654a3262ac0bfea1992c068abfdc5f07a951804048c76bc02ebc2570c1e5c8bc17e62c6170a20dc60da2cedd79116df76a0590ca78fe0f1aeae09c4b6de0dace177fda434eec3f94080d36ea633f8e04eed2b652fd72b5cbd359685342656b719b08dcdde1f46480a0269f96cbbd9d5ff632c3886c10a216fde2f839dda323a0f97089358e6480e535fb7255b9e5d5f38252d070e42dd47fa0dc62b2c605958d5f1806235b24fbe28fccb659059ab7adee315cf82f6de174694037b3ea761e5a5d50ef8bdb98b7618dbd9d87bccb1e03623c752985fb562c67b4dc9051108056632bb62c6a65906ee6c9c07c4342c378ab16f9986fc0e1c4cc2a0d1dfa74b30eb44f186d5408a1257aaae19770257e731412b97792ae393318d5dd593db61159e46156397fd4fa986afdf7c88ef872fb186e7b25d61d566b51f90689cde0f811f49d32ec4ea6d9f220028f124758ce2d20c432294bccd7c3223a41da947b78591fe77d3003acc7994f7ee993a54552581cb9a357befddaa13036547edd449ca45da752ce232138d556082408e56e795dccba05542e7faea0b93c056d19134b4d6183e90b8a09c555d6a896550b82a6ff94ee00b7875ffcf18c48fa266e424400d4e417bcf3127d09ece00bac9a92c4a4c616e1953f98a485d4a8e709f90a4e64b0ab1dec196ba94a315bb4c49d9b05852c162c258baaf71e2c96c4f5f4dd6f1a08253508f5f9a39ed503e705da4670e0cf82216935eef7f4902c88738fbe19313eae28bd0de410f581c94f38a487b209380c6aee33c95ce5805990f3738743670a02c46a3e867d639e48610092dd595233de7dbf493eaa933b870067583a754f4ae67859b4f11e8397ef0d4f90b83a86e0aa9d64c962abc97ba8b1ca21a6849a947317fdfaa73bb98231625a2bf30e9ec4fed9e36e8d208681c3f627c626f128a867b23475bcb04d7b0a00be171be0a676240780c521539c8f0ad0fa22e88f1ad3ee699d4cdc7b2493c3285a1b164fa287742a1dd21b25208bcd76d2090f71a924cf1027145edb4cf24416fce9619481918cfc92f591bfe4a7488fab70022a76fef25e1d9d8aa15656bcb2ee8fdb608fd20e393c636f5787b605729a1317b0bf6da199a808744a66e85efc5d051c21a0c9f7412a6c65621814de86aae073c5962b2b5ce8f627b021722b35a944258e5812bdde478eecb33f11079fdeba9267e1e9fff89fe729204c93c78f1a7a94b5df617a6cb7c42d05a972cbd9c1cc55309a525a914292d020a08030538006d702b2a098cc7a476b60d4b275d4f7b5b3334ad539cd7f9c80c27b73565d254cc353ab99e3baa2c5e441b7ae79dfdfb3b877a885301551e864bb635271c8f8555060f675b0c7ed9a283485273de853e7f2fc6079c040db59a5cecd1c4f58296a43117cdd84a90ad13a2e66f1ca2ff64a37f87b686c6912a6f43f371b278fd39023f4a18716c52a16e6bbe4d1b06c91879c87d01a18b6d13c647ac253674744a1418301d9b9acb4e575e47f5dce09741f6d7a9518ca8f18fb344036e481a8deb9c34ffc4bb83a1dce02cb0f8be85237e45a33dfe09b5b8c9e5ae13a1617c84ec46a2e38752ddd2294377090e4a12dc9f2c0623a449927df193da47f756163e9579a775c9be9fd3a26ae6b2e4b9fce546ceb7443fc3a5775446bbb4eff475496686c49936c9202519d1ef2901aee92175b5d535838d2e9b7c539f3fbf0a9328a358c8f35d9f67ce17e5e00e493beeb0741a2d4359a764023597c2a1b777712b301dc9d210aef62d077cc86a2969cec749e5f8d427fc044a7ace7352a850e4fc9accfdb9d6315eb9489cd2fbc735286d9133f4f2f78f13ccc2b022358bdc18247e34903338409e10ab4949ff6caed26b1f8a03fd638b29efffb7fa3cde17983e129ebd9fece014ef16f5bb1e847b86df9d117531d49f5c14d64765a15f1c3bcc91938cbcf5d63332619c6b21d4ebc7f51f74e5f98079fdaeaee714f8a0dba56798348d36ae897d04ec2cdd7bb8a1252d9a3baea138649a546fdf37020a150c261b6de1fcd5c7b3979515c2303350453ff1465f09d093909a32b4849b212aee71ec46479535fa8e26474436890c447055ae1d86d25ae31521ed47943f0688b68f9cbf21c6473251900ae473bf5ad4755f87b48c63a010ad104c68e0fe36fdbe368e11f275bb4b358caade7ba198c3fcee9388b715c5fa83e04f1d6ea8bb78a065d1ba6cd97dbfc912f53f724c6d5b451b395226f77e282f582d8da7e51b7c2d95a220f5b09fdd1616b0f7d8e4df1f9d3d46c945c15b74fde71ee462c15c78efb75b92f5e49a872741fc446b8ff07b6083ba7c99de745453c9b4de4b94f6bab8ada091e4c59469e1e0cdc3afb8b123774a56d1f6ef65838946a966b4caf093ba787d56a98d7ddc32abc0fed0a254f737fbd6d94a6c32bbac907f9fb96ab86beef0194ad95e08825bcd815968a6c60b1f7903e0a9d933c260c16c59a691c07291e7d201c39acf7290af650cb053e03181b7ad3e0f318ea388d9894f054a26d4cd384434d2de13e7aa5457c36fdb864beed70211fb8ab30c5ab5345dc1d2e1844c86c0189755adb2a6f3ebbe7247db36bec1389f0e34c096f0c52b1153d0de26a53cdb747916b77be36a3f45154fc11fd858a75ae385881b76f7e2dc43b6e77f2fc9f94400a84d970388efa6e273401eb348da3484ed2f6501b610f982e98b7fed26df3fa62ea6b7c5d25e46043991cf91e2d39f5ce467e42b585bd9eac534ff5731ed0e1a0ea2a4990da0427e2970a2134198a7c51f7cde91397d822e502c522967ae8fdcd029ac75c9dace88240d4f1e41e672196da881e7188c87a2e6b670b13eb56e709e8a5a9946849521bc297cec079e62563036640926c5080ccdbcf7a2ac1a1647683c9156f70056910b1df81cc3a3f3ac2fd11b70a8f3e4617f61b7e31cbd6a6437dc5409c6b3a73ec20656b95dcf04c011159c546d069870f4bf59743abe79a8b12d320809dbf243e97d78bc9f5f3aa4ebb1ba0571a027762799ea963dd801afacf52cfca240acd999e4f30ec80811df9b47f465fecc2de8ae6328fd6a4f5348ed0947789f58974f7335351e9f542df80c3ad7b7008f6804d59006bb8a7388ed79bfb7fda613c81bea16fe4980cb42df6c8dcd2cce61e632db3ae660b51cb40c95307969c4e51f42d6d0f89e6237f07d79fe052a4d6e657f079495a8b1957c2db06c1d6ea705aa4b8d653ce4012c3ff70880b9d4b73150a316ec1be85a935c2dee7eb14b56df1641f1ac7cd98812ee79c567ae1ad17cafa7dab5a284b58a504d6696ada257b4f1460fc0994988da7b34cde5f938a31956c7f164f828a6355caa9e084d3a1e896d47ba294b262a21014f11e348e0d72088acc89e04ad03efba0b5d8405ec112b9901753ef79018d307dd4c37ac1f3de7799adbbdc75178a7ada8ddbce3a9f5bef701bab3c09cd925c2e5147bfd93a5567ac4c7a78cfb3eb3b16a6a7d60e2c5d258952803c0836a115baa462bf8bc0a6a782a7c58be1d9acf42917d04a99838dc3d642afe9d389639a7566451d7581186273ed5c3250db67ea676d783d97b1baf58e938a570aa5d6e6779e81d39c7415b8360fac46e478f42de951f787dbe2e92f7402215af9f9a047f30cc33f55521a8be7c5aba5cddcccdb14c0a372dff8ef23391843a27473c521552da4d3c42fc85e96febdbbfdc6bd025b63ef099550699e735fd5c495549a6655b3e4c3edf3f267966bcf399f2198f8b1cf438056081b9f79e75bc15fbdb5cebe9d4272c984502da5cc58c47515bc36e1cb5179a4429458e36da1ac1cb0cca9a42b7778adf19be469379f39b8011f33854ca7c76006ad77990986af9a811a50c7de24fd342a78953266ac09a10c0502785dcc8d5697e6676dae7f5435c22ad750b34a1d920babdcbc502197a0fd7fb9f00cf559c94d82e97f9f6e303ad7d62075bf5c69dfc2e01aab543c58fe2a11f3b61b64abebd46f8c9feec10c8ec82ffe359fb7c281f58237cf80d64675c8539889ae18000ee5d3525748e28b9b40ccde8ceacc066bec5290367a66cc2139d12c04d94fc6addb099225fd6d3c5d2884e1f3748d51061f9ab8a2b5b43f7ed044657ab6c9cb555f00a1a06c36287006fba96dff00bf407040b504155435af58d76797816b3dac30a1b5d0d110e835acc7e23bbcf98d611f5735c31ef7f86b37d6c62bcbf0e1324e9b80f01bc88a47585445ea862ba26f8dcd66303a26e02254d01a115474a433ca4f0f4e08bfc57569dd38454b27308159756978703de6f0fc2588735cc820b5195c7a4a56b91afb1b2bad920e7d3a88c4c3ce8c35a7e39e30c6609f31f739657274a669b568976653d64b959892c5cd7a6e526b227504b69f47b0444cee311bd5e02cca3926eae53bf25a5379bc5b20c395d6eaddedf5f5f2c7eb5a08eec3a4d9923f4b45ec3464e01daeef5a42fc0ebc2b3008ce25eedf56f317026180b8c52909de319cf696319dd40e177557b8e1e8bc4fe2bbe42d751d10323908263508dec516948e2a4a6a9e6c1bdfa7992fb842ce94b367d9eb093a24a2c26f54e963516109bc4fb0536b398f4e24c38612d2ab13432f82c339b4b690c64dc43a8139465414290632b80d4c34de5d591396c314f506ebe147d79d13735c8ee8eb0037005dd8b078c3a726defc6e7cd41f9f717cfd3a585117ea129753982be7ab39e1658cd7ba23a9c52f868bb9d73b2f327dc700763d7ea74357a80d886a794e6323da8d177b3a3c7dacac92f6da00062659c329e6907296e830cbe35be186ff8d72e3292d1de8798d1793417a20283097dd0513a9ae313c6c610a26e81d037bbdc0c14a56e06e31c0b868f0f1897599dec761f642faa59eb68855829710b01410270e43843086bfb5771541136d7afa03dea8e4f1952b3b6a0e8a55e4266ffa212f9d9adc9182da24ed681949ebcac1562a83226f36f8053e02af04576041bee8cfcbb4064b9532ea709a264e1ead9c1288f0c2b84119803debf02dae41a31e2e0854ebec2a85f12c4853d746b621bff9c321361349fcfc61d1836df208c5f2ccb7ffeb87f2ea2c0200266ffa69396d984ae19b1d46fe97acdac0bffa356f090a813d60e8a3f6fa96698ae7a19fecbb170eb78cba09136bfa6812a38c34d0b26cda6dd4b77affee509f8dea223279bd90bc27cd63a29e11dc18c90b9a0bfbed4b9d34ecf4a731062b9e8d65d4937265e2bf95a6a0d28d93fd9bd30b11f670b6feecc7eb6bd15147811c00edd0f4580ce4780bca31156b227d8cfd405efc6b0daf3dd6de8f19d98ce2209ece0c536ec1feab39952f49831fc0307a8d0d8e4010d23974b1aa48b34987ffddf04b8acf74ca4bc4df1fa2c4aea75c8f6093a6d27ff4a9e42f89b4406633f117c4424b8f1c1d1536af4251a4793893ce04cfd43750fc4fb8664286d5b8a3c3816e62215933f9e07c6f9a424bbf870d5fdcfcbcca0bfa8f91e11ab4b958ba78c2e8f78d4c2e74337df153393b8483c8d42ed54ddd457cb39a360bb246d85c05eca57572cc94870ee7a4773b2f12d76412047302c15529589de98f0b691a8dbd1793843350449b2f25b15821c311c6a8d14c6aff05689b8552d8f89d15d9d856cd1b16108b7dd48d3107e6298260dcfbe7b792d203fc730cfe8262d6120838f01c6b29ebf352a619f808b6716e75b10e02ebbb80ade4135d13797d1225fbcd72fdc897d766dc88682859fe7d48041ee1c2b643e5ed66fc6195386f76b926a5d6137c20a27fb7854003c65671a74bf708121e6c0acf78ee981faf88254e9be3763f14da18ad2188e772c1e4050b674826271051606df7854fee9ed297871525f85c53ebcce1a9168020b36361e23a639f17f55dfd308d0a4b3077d836e8524dda57ae4b59a0e939656ad9dd884cc84c51101693ee97381bdf560688fc232a1e748fb3d3e8bdf4c0f9e3a1b3b2b3ee90d5f2b53d2f46474a10a11d4c80342e8a6ce60685a0e0c41074709bc15922905dc68acd7fca5600ffee0e76fe23cc00cd3695cdb3e05fff299c79edb9a53ed3f4869f4629ae3a68ac11fcb5e4fba3b5a4d3370104bfc786734b83683b33f8b4c78fa05131b4814743241b80871b80fbb4d5e76be3997ea2c6d8371bf7444ee402c0e2c54190872b9352d9daa17a7af1563fc9d941ff3efdb7a693b656d6623a3d0718fc777a158c89a62fe58c670c34f07b4a5243a1444971fa7e7a1108f075826b8d8f94102a1772f84c2ca43968fc26b1e86b31c4bcd7c31329261912ea36ac8c89eb398d521388f7ba2259ffe63d1347fbc08e2239afbcb58493f1352ee8c75f92216767696811800ac50066fee4d5b0e141af18d1d1fe8f1bbb0565c58fe3f63e00012fe8a944a115796c145d88d8e2c516943a8005a1f9a98650e78619952c5efbc954fc5550f869bb1b8d74d075945d6fccbec4520e6098abb6e6150f16ef8f2c0a76dc58abc47280a7a65f78c11146c5a7e1149812a0f71f98435ed481cadb032f0b0367a42050e203a89fe7a498f329946d96dacfda7d9f851e380715366d7ac072839477008e005c721d056843a8fd2b216d0c9c920d1bac66b3dfb912aac0216a7977b8e3167d374f7246e3389e5ad1fa693cf08ccb017bcb88ccaad271b1eaf2f11956e34116333a6f9336ca28da8a8161287f3b229b060ed961abbdf9e9a19de755ced7ad97499ba015c3c488d7de5c1b58dfb29784fb7286cac54663daf131f38e5a66ea191a460f24c0c52b37983f0a9d631e3d1abfcd3843ed53a16151e19c81bd6bd2c3c126190dae8c3e532d54dead2825d04d25dd9b3a529bb7d17590c67810c52ff4fa7be2c6db3bfcb18d46d8c11e22489fe5be4cf2606ad237e79eb1fec50d92dceed9d59fa5a3630202f6cb9fcc0888dfba35411cbe3ef4252943ac3126e1190952e8d105110f7377a97283bdf294a2776d67572abdfc7fd783d3b87453a4d346d1c1f1592e0931dcbb395f10e775ecc673ae50e291f7fdf02ca07f831927dcbf38e1e3dc16a20e61f4199390d6d9a9026e4aa66352e9c55286652026ac43c51e4c6910343e82a17a945e7cfad26dce27c1ce157696388628eedda431421a1a8dd30105af07404ecdf3f26fa739542253e39a1f9f69e2eb9a9dd9b0b3b5d88ac59e8c2333a44921e627312da59b21d9df634be621ec0ce38d0583f40b789739c155ea7a523f671458e7ed458cc13adceb7d456e982b7f2c223b92924816554f7f28ad6483d3ddccd44f56fbe1a0307d5bf607c6dc94c65a2d6cc62e279b456dba1441a688254f9f63d00c4d0a326aea41e4c77d2f2de9f3ac345a54d6ad6c2d2e8d62a4ca06661713543bc8c4934d98bdb2c6d725a4e662e8cd2c9e8c66af48644a3958fac855051c57484f86eb682649f10b8b1bf88195e934e9dfbd9844d9ee14aa5d79ef1baab62048ced8a859b83732547d4ca9bef5535eed711ccda610dc0f08976bc0f56d3841bffdce2f5c4156b74257a93615912195fedf68e57dd3f36a93c7ba29edb3acdcadff7be5d6e5c9438d3bca9032024df66c6951ef6613d5bf9ad3d1fd8cdd9529e178427e64e0622c155a13686076fc9c0bc26c47603602d1df0549a311154f4c976918845288199abad0180baf36ae0ac28858bb72c7d22ff7b6a441d76875927170e994e45050a64fa046a9ea83fa9d21ea59857b746a08bbd8e04badb23d24308ff14826609c4bb4ef31c51ee63246cc72d5bd52e0ec960fb97f3f0fa99e722a5afca5dd996fefd2d24fb421ed45f6197ab733d14c87a663a5a6b9c763e609681d0e36a8e45ecb4b05432204f8417eac5fa4f5fbde6d08ea41506674ebaaf855548c89111eebbfa46976508636a4406d83e09134ceb65a292a688dbf2cf02baf30ebc7e10c3f33bc2b14f8c5281a1b73a3bec813edddb98313ec2d0c92add529919d0cafdd477401d5177698483a594202c3f1a91f70e30f643bffd54771f31573cadb44d9ac01e6b76bea4658ba68d5365a07a56dca7784e1b37e9eb610a7eb2e090c404f5e7b47e5d9cdc4efec00082a2852d263fd3998a7b27cc9b2af7c33b3d7525518aab240c7973987139681ab0e33771b31e02928f7626ebd890363ddfd89218e96f12c645b44f39754c19077591be05653ea1a227ce62fbf03dc47b488bc9beb5cca263710c7150eef5c488add6e83cdf135f87d8bfecc3950d5cbe64e0c6f7ae3c9d7df9c44e72f2bf926e5a5f6d6c1593ebc06358dcdb5b1020a8dff9f1df7b89f6557e4c1eab9a50ba6a5def2b1fd8738fbb3654f6390f893e7a8da1fdac1fdfb3d28e7f20a2de54fc14bec72a6b2cf351fd9db1eacee6a5b578eb880d1f4b2f369daf2a6246da01ec8238ccb6fe2f5ed7a487394bd0d48eb5902473e5e9a804f464ee03906bdf033d51def7de7d0336bb09c6a76eeb113727f0ded229d69532122d2ca49d0298c3fa125c753a5778494b2bfb02dbb4c087452e7006b5a1fceca870a9879d832d417a444d4b6016e306e2fb5aae79a94717f25c328a04956bb2e20af1eb4638d2f3dbc1a38a08a3d28f0aaf1a55dd8514a8dbf6b62b4fdfca999812ed435b3d2bcca69e73735c4b8d9abc4eeab3a18cdca3009d1cb4c942a5391b2a4974c5b18811a10d75a8a730c1fdb6a015fdc2b2512c17d88a8ed0178e99a449bc9965dca1448065079e701775eebd0b8c6123c72d0c68b6f88f0633419c0acf862371af81ef9253981156bfb1a9859b080bacf3d23c8df2de4576f802ff4fcafe75e5a42d911afe6faba0c49719110690e830a52d73acaae59282a758a94cfe4446771e4ddf727f2cc1230b3dfd07c3ca11eed7307cdeab305742afa3dbab680826cc4f12192d1991b8c8fe6bf14f7d44c03cd1dfc06c48b27d5a34fd5811d48264aa6e909950f8ac691ae3a3a0cf501c6772f2623ca9154b03c805634f44334380864c52359c895e67c0265fcc1117f4a4cd3e655cdca411f50e8ee653c068bff46b1881ee5d0535f90f1dc631943c630e793bbb17f08605f92fc29c43b02cca97806a9c5649c3909f95794b77f3c06b22285f47f1290e3258fbb5b4448120bb89091346aabcde568cc0a427d368cbf827acab7be0e98747e70c2276f58496f3ebbb9c36832eba24c2adeafe2f013491baf813c958a436f32c7ba5198ef3cfccaf24cfafc793441d8232cca0e88a1d69bec9205860c0fefd792dade341afa9029ab6326992a86d6445bb32980e8156e90eb9e2fd7358e9353a48aa1d7a944787fd1c5234f597df0eeda00412db039f11f3e50e778cdb9a6aa1b2ec9a126a1ee69c7f3be7692529424744d74efbe4b9df82a431721b3fb15a2321280f0f6dd7c2f56871f5935308763c64152cbbd3a15c179d644b2afd207ec5d051ba61bb4ed3993017684d2f178312994eb309bd4c832cf1a550fe3cfcf243fc012c582212f4685e94bca0fc4f899304244c47f346e8f62358d2716a5c1bf808e8a98fc5555fe2ca4988845a94036208880a21de6487fd004e03065ee3b4bab077d2d630ad91bf28aadc26e168738fef79dc83125222977cbffecfc3e2a0ad033e32342e71e0136de229bb6dac91cc63a3d3ab6a11b5fd2d5f6253f9c8c1a2e43f0b9019b2fa2b5b5f75a5cb69aee27f2f8a4e136cb2a68131fea4ef00da9edba82c07c6adc41f78c2711871aaaf852548c8846e6dd0d9818fb418d7f8590d32d223f5b0a50df9401efcebcec371724a33bdc83194d234029747bbb3e4c51e9fe37d2c288d82810c339a44f758035eba9914397fd22859f1be157b7f709339e30b202fc64ee0fba209323e9396eb9c2e971bbab8ec2c2631c7c3264acc110aadf167155e9c68783ea7a3ec6db3760f408736330805236f543f38833538e62c8ee958b443925347d9c3f993daa5f9efd6d0ab93031bd852d68bc27d7b928144622ccacb67f2a30520481b401846b7a9ce0c69dc2bfe348cf5ffc1b4dab6d13fa896429d5e54dcbf4dd2bcc69c1314ab747d9e940e5337b40f6d5e8a41c0aaec06537f4e2d0b5eb4fb16abadfe4e063dc4ad3aa5a947a94822c29c4a440c2ac578d851636eea03d1012fd908b0954ea5fb9907934531986e0c10caa8f14c06890fd886a9ff7f2c5805a9a1fd0001a980f8a79006cc1c99532482da1ab0aa7c93ab2fbc5649118249ddb3588ad4bd46ade7c9f08080ca9bb9c5100eb6b272db6ce413f7d1570f92cbb7d3cbaf31568be64a03cee83e025b2b53f7cc855fddbb33f45589da9a479fe90028c49dec49361051c346fcc72b1901d0e5ae9404e46db011aaa14ac6bab3587ffad9dae789de9b726c293470e598d043e80a33e747de99de890ef2a3fa12f8125aa33d8e9d651580049fa1e86cb1341553bf416f6ebccc8fc88434829d68250603344ed107d6a33f4c6e34d01fafa11896a1882397db96ffe592baeda4ac85b3279ee961fcf65fee12b9483367f4fe9f6800f27e0b8afe249011eadc1126a43f61d0043a6c7fce4b811be51121229fbd597c93a289d56d842a4147488828b8c0fb134a0d904156af217506fca60c21e5c2051359332152e730dd48ea2344a4819a93d524a87fdcd11c84621450a1beef14d745284d3a52d31fd6ed7d50a671f9d924361dd9d58be01757bab420a09a9330630d543b5ecf84f2b9ce4ac53f6c5aff98de1c79e5af3f2a93419fc9e3b4f91791759df4adcf8a77f692c9f811bdc6f158da04fbfb2e72dcf87783e13d6624d051751bd4a2ae1c38f11c126e735b9d84ca9ae34d491caf47b9b2d4d9d27b3d89b2be7e63f92c327b03f6d021e0e68bc3b0d60ad6b90e95e1b3f44a940ff928124a1b8880fe565f111e287857c4835356d8bb4ffaf14e37dfbbbe3cbb6d6261bd10f2328be56623166c456cf3f395b098803f6649213be7022e77e064fbf1f57e27839fd78895b1fe4e4d7ffb640b984ef57d98da18f6c15c200f605eb317a4a5c2937f21365d05599dd2f0775c65bf4d14addfdb2fa6ac338152d9f91aa2f67a01eb515109536fcbbbe38e79cc912f41d3fe11850e951170cdf391230228167da804d91c262f34d1af7d7aa27f7ba546b9aac26fdd22b9422ed630d1d0831fca0f5cdbfea5c8dd1e9bdd779d10047c2fbbbef693ccd7c330381b32a00ac0d25223b9b1c3f1b06735e0338ced84511b5fea3d4046bfe87d14353ce9887aaa2ce1372ef23d2fca5f33ca4c9bfa13fdb02d3f2edff7e025f9dd34713440502830cd20df295f957c5246e3781c136a20834bd89e9cea3ab3176a5374ec777bb2af913bdf7127b6a0303bacbf2791709172dcf503272143ab804797907307527f65f05ec570a5f48971083c29020a613454cca7eadeb30fe9db7b20cb7c0d2978804398b83d7180e29a99832521dcb74b0cf1d05ec52494e302d62fa4cdb416f365ad705f2f4adeefcfa58467a041155f55de1c156191f0ef42bf6d37aa02063d9f887ae1d788b41d193bcbf74e2ec81d5a6f58c47c4c21fbf82ce285f3a03e8bc3b2b7df4c9cdc1e20c39bda5be067d2ba17db9ba6b3eb2818ba9a047e00bbdae2c9f14afce1439fa49d7edb23fb6e8be32fc7570f239795c808ef3d569aace0e9405a6dafdcee0961386a7a57958967f069b09fc660e70076c7e8d3951a0ac362cae0640c9b1569e06750e92212559ff0d20ce7f8c6d44bde13db9e3b41ef8bed6650c3a5215199fdad645940e0a274b979bc098e2c5fdb9fa51a88e7fbe16081e14d9fcf67d69fcd227a1b3762b7fcc89f945c95cce8c9e07aaf05f18568af5a4f7d355e8bad144e9f23449f1580371f0948a8e9e1e93a1ebc297246c67e6fb43750a727470b1fe321aa0e56559ae4554ea912225fc3b4e7b63aba7b330a67bfffa3352561115cad6ddd081d92e2ec2f2968ab5dd1119aeec3bf3495eed520df94207caf10f3c136134456e707358540d800fcf52c1a7215b811ceecc14e3b11e08d25efbf3a906a756df6db651f73c150b62d90f70103e9ff1b6622ca5bfbd17e1a10f6f4965222fc73b95590183c36a70a36d0627bb7bebf7ee5d7dbfe528b236552236117b9d67c32af923ee6fe586ee4f365576050b0235d15c6214104a97b066d36f9e525e79dba5c5050cd8ce6808d348db6624535ee6a6c51f9fda81f33d0cf0a91a4cbe073f35813ce61432a098461b48a692036d65e23c29058082e1f1d184d5ce6158e7de0c6565b7fd6d204391dca5c5a20627d7178a040acf7efcf845626af672d31b219c43997d994c47184651f69cee6dd95057a3df108dc970afd9ef31495c19139f85b9e5b0e2b2b9ef4087fda817885c359a8f513c3491bb380432c2117b11ecf24a1a473a77091c7481a9121f37ef4a692d5fe1462ed7f1dba1e12c3012ec73d97a76360893538cff91e86c7aa061c2416f46e766be1ce834ddadfa6d716c2d614b2712bc52fe3d009b2486775e69deb35779c0ade45f6b3c2ed2d6f8f97abd27d3df57536f9747a3a2fd0f22cbf27d96574f35f0a659466844472910da5f41f56f238194356909cf3d2ff1692148743edf513036a647d187d594702966296b4ffed640637c4636652e685e476859a8a70fad16121f19ab37f7a5787c8b825eb5897e64fb2ea06cda195290689686177b09d58de77f69e3f46bea5d2f29a618d956223ba2d8dcceddd212140355c2f279407d31b3d880b973966805fa47751a36e547eddb70798338749482c3a44ed136f6b59fbcc2c2096e21bbe3ca8d81623b4e3f17d79d214abe5ab77d3cee8b65485d572d6ba46a0bbbd49926855521df751aba88397a1d523925880003d7412e79da0e5902e440c48c1a4914a8d104f5e44701f8420e2d266c0b78a64e4335ef8c98b8cfc1295cec1f34cfc9b22a44fee33f4037c685a64b8bccce8e92e286ca98ecb7a6a0ce01ef4378f343d5ff580822b7763c9cb78782db3378710e3e9e4c945772e23b876eaa78efb41bc1b0a691a081b7a7569f8c28c2d61cecc2dc5e6300f528d6c59d9be8917bf69cf72d851741d94d815cc33a8feb93204a71201afb82ce1b3d973c60b025528a98cdaf17faa17c152866e52f6e93d470c30af738958d1a955415638faabc92225a6837f7ed4f8de329a1b0d2c6bce3e71e620cdc5585a0316695021ed858445479a348bbec323e9d74418ef93ed149edc4d418e308da17b24988c86849333be2ea33105d72ed9202f84f170c55a522e052da6b5f85073fbd558e916a556b4224de8f91620059498e24c222960ae117d66324ba3ec8deb7671bd3cf6ee421fa5c83849f8d896cb8885679be0fdfa3a1f656abe0e7b89c0ee65b4545d85cd7c7d051a4e75cd32a329f533481957c066ce91a8411d4d7d8e237fc748358933a5cd126911d512fb502888ff040b7bb7f7be653b1535f18d7167f312f24b9f91a8042a837583bd9adbf6aa677f4a86521e3e9aa7e901fea05402e0182ca5d6c6b6a1b27ddf85abcada9089522a94bacd7273781aec3dab18427bbfdfaed300999fc5c9794084bd1b6a3d973481281c0202c053616676898d7e4ec52ad88e942e2f860f7eadc92fda1240ce1d503b0c02cb0d7cf330fc0dc3ab1c6502dd3068af081787bfbd71f8cde35dae64ff83a206b35b7b50c8c57943347d9e5b528f03d22ec98a85b952f06977926c6af3f537e5965f8132d5bf64aa918e40ffa249d309806cf4ac6c59c7b6f725c4f10b84201ffe36c05f8619ac7a06c99fc3fafdb1a5132a2a27606a54ae46947df84c89ec61c7710e8c96bec20a4c6f3af9d8d46276b2d3a08d6c6b27a609f3018df7cc6c7240bc026434fe1184599303411880a2edb8f5207a11696a444f6bcad45b139123c195b668e1d497f9a45c720fa645c0c74a7b1101fe0a28a1bd4cf9ea1fffb870a1fc2018918edccc7d1405ff18d02897aa478c4b7060cb21f76cf2001ec5f2fd814dd3688a3a5189d42e6d8533cec285f9a40cd8195bee5918d581d9b081743d2cbb113a97f206af2c8b0f3e0694278379a20ba5c96a73998a87680bc2ad1947cf14410c9e8d24353fba74ad92d23c51756a0ce3f4b3577be361c81de5ee3c1a12812dec60a1d3b87f5e667014ef378a6c61448d648643b734c3d6e6cb220752bffa62edc1580705ef4dd2bf175b275cd4aec46b17e0fa6ceaf02e89cb1b422b8ab4f0e557b3fdef8f4e5fc3b69d99503ff40ee7afa1b7d61d3e5308ef6832c4782a246f29d99e68d0830c90ce5fe2e5e5c95a8b065bece5665c8815a74ee4349258e6b4cdc75d1b514346cfd907c45cc20136091df3623fbb45432f455770cfea213b7a3417a150448c1915974d380d501966d7378e4a8031ad1391545e044d258ac15ad2c0ef4658783b945d6f6fe24bc64fe9285dd025351ff394106b8eb85ee04bee52dc8653b8afd63abf8e1bfbd49fe993c4effe8c9c22d192c75fe0d769386c5231d141a168415c8bc0b06e0342205bc61a90a7277139ff2cd9817b55a5d5b78520e21cc90049894100a4cd2ec1f68d956f31c4faf19f12f5d99751c66fe161ad20d90e8b6806a4072f2ccba7d7724593406214356d75274fdfa855376635403c6a4cbe836c9b06f1a115875bf14f86afacddcddf645e06f9c8bf9c294287934ae32e2737903cfd73643b3dad6063bfc025cd4ce7f1274e36ff36d756e27ae614458b2a51f18fb527d7cd63c7e16d59d1da00aa1a656de923191450b7c5eac33404bc14358231ba21a329cbe120c15df20f611138b9fd26108316867df8be4d6c6bf1bcb3d799c946aa5fa78327db885fdf6d362f27d92468fc0dfc5b6117c95ef277ea227b31c072b0da9fdb08a55c5ea43fbf8525c8fe46d70cf86c804b8985b171d88e2e96a16c63772f0997772b9927d6a9feb68804aa7ee73428fcc4decc48a57097b01c041850553a1c3e9ff57b9695c0fa840265339300f7c2f5023bad09722368db0ef5ef153272401f0a7e3e8e9ebdc0fb3712d4765760029b8f8759b9e9c8960fb84b5979917b240895c9392b5b79a3fe96be896544dc689881d48f076efa45b15751222427aee1a9e6fe323224566c26313939125c6b1dda9627c57e4673246e709934539582432048731e6ea15679bd8d301ac0b42711efc2952fb8b744881c1818b8d7ec53c403f5afc2496bf0c50ffa5178f8fba8257c4aced4fd560d78f1d0ac893a1d1a2afa09b0030e56144951ec749fe0e04163e2c2544ccb17b7833922aa0a4f457de35530f9c0da5d723c1a27e7dd93406ab2e7b11d374ebd13e518eefc891325d2bde7089eddde96cb00a804055657cc8304e21881df5667dbfb622fac670bb76bae461e6df4bc5deff08</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>family</category>
      </categories>
      <tags>
        <tag>family</tag>
        <tag>parents</tag>
        <tag>emotion</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>批量重命名文件</title>
    <url>/2021/02/07/rename-files-to-numbers-by-file-modification-time/</url>
    <content><![CDATA[<p>用 Shell 脚本重命名文件夹中所有的文件，根据文件的修改时间排序，将文件名改为从 <code>001</code> 开始的数字。根据<a href="/2020/12/26/fix-pcap-ext/index.html">使用shell脚本批量检查pcap文件头并修改文件扩展名</a>中写的脚本修改而来。<br><a id="more"></a></p>
<p>rename.sh :<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Raname file to numbers by file modification time.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arg:  dir path <span class="built_in">where</span> files at.</span></span><br><span class="line">dir=$1</span><br><span class="line">cd $dir</span><br><span class="line">file_num=$(ls -l | wc -l);</span><br><span class="line">echo $file_num</span><br><span class="line">cnt=1</span><br><span class="line">for file in *;</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">    ext=$(ls "$file" | cut -d. -f2)</span><br><span class="line">    mv "$file" $(printf "%03d" $cnt).$ext</span><br><span class="line">    cnt=`expr $cnt + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<p>用法：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rename.sh dir1</span><br></pre></td></tr></table></figure></p>
<p>dir1 是需要批量重命名的文件所在的文件夹路径。</p>
<h2 id="2021-02-16-fix：不能处理含空格的文件名。"><a href="#2021-02-16-fix：不能处理含空格的文件名。" class="headerlink" title="2021/02/16 fix：不能处理含空格的文件名。"></a>2021/02/16 fix：不能处理含空格的文件名。</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-for file in `ls -rt`;</span></span><br><span class="line"><span class="addition">+for file in *;</span></span><br></pre></td></tr></table></figure>
<p>`ls -rt` 会被文件名的空格分割， * 则不会。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"> do</span><br><span class="line">     echo $file</span><br><span class="line"><span class="deletion">-    name=$(ls $file | cut -d. -f1)</span></span><br></pre></td></tr></table></figure>
<p>移除无用代码。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-    ext=$(ls $file | cut -d. -f2)</span></span><br><span class="line"><span class="deletion">-    mv $file $(printf "%03d" $cnt).$ext</span></span><br><span class="line"><span class="addition">+    ext=$(ls "$file" | cut -d. -f2)</span></span><br><span class="line"><span class="addition">+    mv "$file" $(printf "%03d" $cnt).$ext</span></span><br></pre></td></tr></table></figure>
<p>被 <code>&quot;&quot;</code> 包裹的文件名中即使含空格也不需要转义。</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>fix you</title>
    <url>/2021/02/28/fix-you/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ad2ece2b7b01845d1790126dc070f35db2168bfae20eb330543899819e38bc56"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>psychology</category>
      </categories>
      <tags>
        <tag>emotion</tag>
        <tag>life</tag>
        <tag>psychology</tag>
      </tags>
  </entry>
  <entry>
    <title>fxxk VScode</title>
    <url>/2021/03/05/fxxk-VScode/</url>
    <content><![CDATA[<p>VScode 中设置<code>.tex</code>文件的 snippet 的配置文件是<code>latex.json</code>而不是<code>tex.json</code>!!!💀</p>
]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>VScode</tag>
        <tag>tex</tag>
      </tags>
  </entry>
  <entry>
    <title>“Sorry, sir. You&#39;re dancing at the wrong place.”</title>
    <url>/2021/02/21/Sorry-sir-You-dance-at-the-wrong-place/</url>
    <content><![CDATA[<p>标题随便取的，无任何内涵。<br><a id="more"></a></p>
<h2 id="醉酒的“课”"><a href="#醉酒的“课”" class="headerlink" title="醉酒的“课”"></a>醉酒的“课”</h2><h3 id="利用醉酒"><a href="#利用醉酒" class="headerlink" title="利用醉酒"></a>利用醉酒</h3><p>醉酒是一个很好的工具，对于懦弱的人来说。平时不敢说、不好意思说的话，都可以借醉酒说出来，而万一犯了什么错误，也是一句“哎呀我喝多了对不住”，一般情况对方也不会怪ta。（不会吧？不会吧？不会真的有人会怪醉酒的人吧？[doge]）</p>
<h3 id="酒量的作用"><a href="#酒量的作用" class="headerlink" title="酒量的作用"></a>酒量的作用</h3><p>酒量大的人，与酒量小的人比，喝一样多的酒，头脑仍能保持清醒。此时稍以言辞，便将醉酒的人耍得团团乱转（如果醉酒的人本来情商就不高，那对于ta来说更是“神来之笔”）。“享受” 挥洒 “权力”、发泄情绪的 “快感”。<br>（这两种人，哪种更可怜一些呢？）</p>
<p><strong>(PS.以前我的愿望是世界和平，现在我的愿望是消灭酒精。)</strong></p>
<p>(PPS.现在在家里也太废了，整天写这些垃圾东西。)</p>
<p>鸡飞狗跳的一晚结束了，，，</p>
<p>2021/02/21 02:57.</p>
]]></content>
      <categories>
        <category>trash</category>
      </categories>
      <tags>
        <tag>family</tag>
        <tag>emotion</tag>
      </tags>
  </entry>
  <entry>
    <title>connect Wifi in linux via cmd</title>
    <url>/2021/04/22/connect-Wifi-in-linux-via-cmd/</url>
    <content><![CDATA[<p>All cmd run by root.<br><a id="more"></a></p>
<p>create config file via cmd:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_passphrase SSIDofWifi passwordOfWifi &gt; /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure></p>
<p>modify config: /etc/wpa_supplicant/wpa_supplicant<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">ctrl_interface_group=root</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid="theSSID"</span><br><span class="line">    psk=&#123;encoded psk&#125;</span><br><span class="line">    scan_ssid=1 # to connect to a hiden Wifi</span><br><span class="line">    proto=RSN</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">    group=CCMP</span><br><span class="line">    pairwise=CCMP</span><br><span class="line">    priority=10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>connect to specific Wifi:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlp7s0 -B</span><br></pre></td></tr></table></figure></p>
<p>-B: run in background</p>
<p>if failed:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep wpa # get pid of running wpa_supplicant instance</span><br><span class="line">kill -9 &#123;pid&#125;</span><br></pre></td></tr></table></figure></p>
<p>or just:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 wpa[press Tab]</span><br></pre></td></tr></table></figure></p>
<p>get ip add via dhcp:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dhclient</span><br></pre></td></tr></table></figure></p>
<p>todo:<br>wpa_supplicant.service</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/u012503786/article/details/79541811/" target="_blank" rel="noopener">https://blog.csdn.net/u012503786/article/details/79541811/</a><br><a href="https://blog.csdn.net/yunlong654/article/details/88655685" target="_blank" rel="noopener">https://blog.csdn.net/yunlong654/article/details/88655685</a><br><a href="https://blog.csdn.net/u010049696/article/details/48765999" target="_blank" rel="noopener">https://blog.csdn.net/u010049696/article/details/48765999</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
        <tag>Wi-Fi;</tag>
      </tags>
  </entry>
  <entry>
    <title>note of book Android Programming</title>
    <url>/2021/04/25/note-of-book-Android-Programming/</url>
    <content><![CDATA[<p>《Android 编程权威指南 第3版》笔记。<br><a id="more"></a></p>
<h2 id="1-11-挑战练习-定制-toast-消息"><a href="#1-11-挑战练习-定制-toast-消息" class="headerlink" title="1.11 挑战练习:定制 toast 消息"></a>1.11 挑战练习:定制 toast 消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast t = Toast.makeText(QuizActivity.<span class="keyword">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT);</span><br><span class="line">t.setGravity(Gravity.TOP,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">t.show();</span><br></pre></td></tr></table></figure>
<p>Android R(API 30) 之后 setGravity() 对 text 类型的 Toast 不起作用。</p>
<blockquote>
<p>Warning: Starting from Android Build.VERSION_CODES#R, for apps targeting API level Build.VERSION_CODES#R or higher, this method is a no-op when called on text toasts.<br><a href="https://developer.android.com/reference/android/widget/Toast#setGravity(int,%20int,%20int" target="_blank" rel="noopener">https://developer.android.com/reference/android/widget/Toast#setGravity(int,%20int,%20int</a>)</p>
</blockquote>
<p>在 logcat 中可看到如下错误：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">E/Toast: setGravity() shouldn't be called on text toasts, the values won't be used</span><br></pre></td></tr></table></figure></p>
<p>将 targetSdkVersion 改为 29 可暂时解决该问题[Doge]。 </p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Programming 3rd Edition Chap 12 Challenge</title>
    <url>/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/</url>
    <content><![CDATA[<p>Android编程权威指南 第3版 第12章 挑战练习。<br><a id="more"></a></p>
<h2 id="挑战练习1-更多对话框"><a href="#挑战练习1-更多对话框" class="headerlink" title="挑战练习1 更多对话框"></a>挑战练习1 更多对话框</h2><p>和 DatePickerFragment 几乎完全一样。</p>
<h2 id="挑战练习2-实现响应式-DialogFragment"><a href="#挑战练习2-实现响应式-DialogFragment" class="headerlink" title="挑战练习2 实现响应式 DialogFragment"></a>挑战练习2 实现响应式 DialogFragment</h2><h3 id="第一、二步就按提示完成。"><a href="#第一、二步就按提示完成。" class="headerlink" title="第一、二步就按提示完成。"></a>第一、二步就按提示完成。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// dialog_date.xml</span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DatePicker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dialog_date_picker"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:calendarViewShown</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/date_ok_button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/button_ok"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal|bottom"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DatePickerFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatePicker mDatePicker;</span><br><span class="line">    <span class="keyword">private</span> Button mOKButton;</span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 获取 CrimeFragment 传给 DatePickerActivity 的 date 数据</span></span><br><span class="line">        mDate = (Date) getActivity().getIntent().getSerializableExtra(EXTRA_DATE);</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate:"</span> + mDate.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateView:"</span> + mDate.toString());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(mDate);</span><br><span class="line">        <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">        <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        View v = inflater.inflate(R.layout.dialog_date, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">        mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, hour, minute, second).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 CrimeFragment 返回用户修改的 date 数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        getActivity().setResult(resultCode, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerActivity</span> <span class="keyword">extends</span> <span class="title">SingleFragmentActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE= <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Fragment <span class="title">createFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于 CrimeFragment 调用，传递 date 数据给 DatePickerFragment</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context packageContext, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(packageContext, DatePickerActivity.class);</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 修改启动方式</span></span><br><span class="line">        Intent intent = DatePickerActivity.newIntent(getActivity(), mCrime.getDate());</span><br><span class="line">        startActivityForResult(intent, REQUEST_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// onActivityResult 无需修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(resultCode != Activity.RESULT_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == REQUEST_DATE)&#123;</span><br><span class="line">        Date date = (Date) data.getSerializableExtra(DatePickerFragment.EXTRA_DATE);</span><br><span class="line">        mCrime.setDate(date);</span><br><span class="line">        updateDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三步-涉及-第17章"><a href="#第三步-涉及-第17章" class="headerlink" title="第三步 涉及 第17章"></a>第三步 涉及 第17章</h3><p>按17章的步骤修改代码，不考虑新建Crime和数据库部分，可使 CrimeList 和 Crime明细 在平板上显示在屏幕两侧。</p>
<p>但是第二步把 DatePicker 托管到 Activity 了，现在启动DatePicker 都是打开一个 Activity 充满屏幕，所以改成判断设备是手机还是平板，决定启动 DatePickerFragment 的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是手机启动Activity, 若是平板启动对话框 （参考第17章</span></span><br><span class="line">        <span class="keyword">if</span>(getActivity().findViewById(R.id.detail_fragment_container) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Intent intent = DatePickerActivity.newIntent(getActivity(), mCrime.getDate());</span><br><span class="line">            startActivityForResult(intent, REQUEST_DATE);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            FragmentManager manager = getFragmentManager();</span><br><span class="line">            DatePickerFragment dialog = DatePickerFragment.newInstance(mCrime.getDate());</span><br><span class="line">            dialog.setTargetFragment(CrimeFragment.<span class="keyword">this</span>, REQUEST_DATE);</span><br><span class="line">            dialog.show(manager, DIALOG_DATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在在平板上就会显示对话框了，但是按 DatePicker 的OK按钮后，CrimeFragment 的日期却不更新。</p>
<p>通过 Logcat 发现，sendResult() 里发送的就是原来的date，怎么回事呢？</p>
<p>之前自己为了方便，实现第二步的时候，用新建 Activity 的方式启动 DatePicker 这个页面，我直接把 onCreateDialog() 里的代码 copy 到了 onCreateView() 里，只改动了 这里：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java -- onCreateView()</span></span><br><span class="line">mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">        <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">        <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">        Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, hour, minute, second).getTime();</span><br><span class="line">        sendResult(Activity.RESULT_OK, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>而在onCreateDialog里的是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java -- onCreateDialog()</span></span><br><span class="line">mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">        .setView(v)</span><br><span class="line">        .setTitle(R.string.time_picker_title)</span><br><span class="line">        .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure>
<p>通过在生命周期函数里打 log 发现如下生命周期调用顺序：</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled.png" alt="平板"></p>
<p>平板</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled%201.png" alt="手机"></p>
<p>手机</p>
<p>onCreateView() 在两种方式启动时都会调用，而<strong>手机启动 Activity时不会调用 onCreateDialog() 方法。</strong></p>
<p>所以在平板上没返回修改后的 date 应该是mDatePicker init了两次导致的，所以在 onCreateView() 里做一个判断，如果 mDatePicker不为空的话，再对其进行 findViewById 和 init：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DatePickerFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatePicker mDatePicker;</span><br><span class="line">    <span class="keyword">private</span> Button mOKButton;</span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mYear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMonth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHour;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMinute;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSecond;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建对话框 Fragment 时用 arguments 传递信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatePickerFragment <span class="title">newInstance</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putSerializable(DatePickerFragment.ARG_DATE, date);</span><br><span class="line"></span><br><span class="line">        DatePickerFragment fragment = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate called"</span>);</span><br><span class="line">        <span class="comment">// Activity 方式启动时获取 date 信息</span></span><br><span class="line">        Date date = (Date) getActivity().getIntent().getSerializableExtra(EXTRA_DATE);</span><br><span class="line">        <span class="keyword">if</span>(date != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDate = date;</span><br><span class="line">            Log.d(TAG, <span class="string">"intent:"</span> + mDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对话框方式启动时获取 date 信息</span></span><br><span class="line">        <span class="keyword">if</span>(getArguments() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDate = (Date) getArguments().getSerializable(DatePickerFragment.ARG_DATE);</span><br><span class="line">            Log.d(TAG, <span class="string">"arguments:"</span> + mDate.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(mDate);</span><br><span class="line">        mYear = calendar.get(Calendar.YEAR);</span><br><span class="line">        mMonth = calendar.get(Calendar.MONTH);</span><br><span class="line">        mDay = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        mHour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        mMinute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        mSecond = calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Activity 时不会调用该方法</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateDialog"</span>);</span><br><span class="line"></span><br><span class="line">        View v = LayoutInflater.from(getActivity())</span><br><span class="line">                .inflate(R.layout.dialog_date, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对话框方式不显示多余的 OK 按钮</span></span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setVisibility(View.INVISIBLE);</span><br><span class="line"></span><br><span class="line">        mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">        mDatePicker.init(mYear, mMonth, mDay, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">                .setView(v)</span><br><span class="line">                .setTitle(R.string.time_picker_title)</span><br><span class="line">                .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                        <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                        <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                        Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                        sendResult(Activity.RESULT_OK, date);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Activity 时调用</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateView called"</span>);</span><br><span class="line"></span><br><span class="line">        View v = inflater.inflate(R.layout.dialog_date, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 避免因重新 init 而使在平板上不能返回修改后的 date 给 CrimeFragment</span></span><br><span class="line">        <span class="keyword">if</span>(mDatePicker == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">            mDatePicker.init(mYear, mMonth, mDay, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">                getActivity().finish();<span class="comment">// 按确定后直接返回上一界面--CrimeFragment</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回date给CrimeFragment，要判断两种方式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        Log.d(CrimeFragment.TAG, <span class="string">"sendDate:"</span>+ date.toString());</span><br><span class="line">        <span class="keyword">if</span>(getTargetFragment() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            getActivity().setResult(resultCode, intent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled.gif" alt="平板设备显示对话框"></p>
<p>平板设备显示对话框</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled%201.gif" alt="手机设备显示全屏 Activity"></p>
<p>手机设备显示全屏 Activity</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/10/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
