<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python errors notes</title>
    <url>/2018/03/22/python-import-errors-notes/</url>
    <content><![CDATA[<p>environment: python3.6, not tested on python2.x<br><a id="more"></a></p>
<h2 id="ImportError-cannot-import-name-imread"><a href="#ImportError-cannot-import-name-imread" class="headerlink" title="ImportError: cannot import name imread"></a>ImportError: cannot import name imread</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install Pillow==2.6.0</span><br></pre></td></tr></table></figure>
<h2 id="ModuleNotFoundError-No-module-named-‘past’"><a href="#ModuleNotFoundError-No-module-named-‘past’" class="headerlink" title="ModuleNotFoundError: No module named ‘past’"></a>ModuleNotFoundError: No module named ‘past’</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install future</span><br></pre></td></tr></table></figure>
<h2 id="ValueError-unknown-locale-UTF-8"><a href="#ValueError-unknown-locale-UTF-8" class="headerlink" title="ValueError: unknown locale: UTF-8"></a>ValueError: unknown locale: UTF-8</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>  export LC_ALL=en_US.UTF-8<br>    export LANG=en_US.UTF-8<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>利用docker搭建cacti开发平台</title>
    <url>/2017/10/19/cacti-develop-with-docker/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>原来在安装配置cacti的时候一直感叹安装步骤繁琐无比，光是环境依赖就要安装很多个，而且配置文件也要改很多东西，万一哪一步错了纠正也很麻烦，很容易就又从头开始，十分恶心。但是程序装不好，看不到跑出来的效果，谈什么二次开发，所以装好软件算是一个必要条件，但注意力不应该放在这里。</p>
<p>以前了解到docker之后一直想自己搭建一个cacti的开发平台，给团队成员节约点时间，这几天终于实现了。最后的效果就是安装好docker之后把代码pull下来执行一条命令就可以运行了。<br><a id="more"></a></p>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>简介</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>官网这么写：Increase security, enable portability and lower costs in 5 days without changing app code.<br>增加安全性，启用可移植性，并在5天内降低成本，而不更改应用程序代码。</p>
<p>通俗来讲，同样一段代码，在win、linux和mac上可能跑出不一样的结果/效果，即使你都配置了所需的环境，在同样的一个系统平台上也可能由于环境版本的不一致导致不完全一样的效果，而docker解决了这个问题。它使得应用在不同的平台上所部署的环境完全一致。而且和虚拟机相比，docker的容器更轻量，部署更方便，性能更好。</p>
<h3 id="镜像（image）-容器（container）-仓库（registry）"><a href="#镜像（image）-容器（container）-仓库（registry）" class="headerlink" title="镜像（image） 容器（container） 仓库（registry）"></a>镜像（image） 容器（container） 仓库（registry）</h3><p>要使用docker最好先理解这三个基本的概念。镜像提供了运行容器时所需的一切文件，特点是分层存储，可以类比操作系统镜像。而容器是镜像运行时的实体，可以被创建、启动、停止、删除、暂停。镜像和容器就类似于面向对象中<code>类</code>与<code>对象</code>的关系，镜像是静态的，而容器是动态的。Registry就是用来存放镜像的地方，类似于github的repository。</p>
<p>推荐一个Docker基础教程<a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker practice</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>因为安装cacti需要很多软件的支撑：apache、mysql、php、snmp，还有很多php的模块（ldap、mysql、snmp、gd、pdo、session、mbstring、json等等等等），安装完还要配置。所以就把这些全部在构建镜像时做好（写Dockerfile构建镜像），运行时只需要安装cacti就好了，因为考虑到以后开发的需要，把cacti的源码放在容器外，使用volume将其挂载到运行的容器上。</p>
<p>数据库单独使用一个容器，另一个容器运行cacti，这时需要两个容器一起工作，这里使用docker-compoe.yml来进行组织。</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>在<a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>官网下载安装即可，win10最好安装<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Docker for Windows</a>（使用hyper-V，性能更佳）而不是Docker Toolbox。 </p>
<h3 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h3><p>有两个，一个是cacti的源码（用于安装及以后的二次开发），一个是运行docker所需的（主要是docker-compose.yml）</p>
<p>如果已经安装了git的话，新建一个空文件夹，在命令行下进入该文件夹，执行下面两条命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hunterMG/cacti.git</span><br><span class="line">git clone https://github.com/hunterMG/cacti-docker.git</span><br></pre></td></tr></table></figure></p>
<p>如果没有git，到<a href="https://github.com/hunterMG/cacti" target="_blank" rel="noopener">这里</a>和<a href="https://github.com/hunterMG/cacti-docker" target="_blank" rel="noopener">这里</a>下载zip包解压到一个文件夹下即可</p>
<p>现在你的目录结构是这样的（如果是下载的，把目录名后面的master去掉）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--work</span><br><span class="line">   |--cacti</span><br><span class="line">   |--cacti-docker</span><br></pre></td></tr></table></figure></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>win下需要先启动docker服务，双击桌面的docker快捷方式即可，成功启动后可以在任务栏看到一个图标（鼠标放上去可以看到<code>docker is running</code>），右键打开docker设置，把放那两个文件的盘设置为Shared Drives（volume挂载所需）。如果提示防火墙不允许，需要打开445端口，详细看<a href="https://docs.docker.com/docker-for-windows/#shared-drives" target="_blank" rel="noopener">这里</a></p>
<p>在命令行下进入<code>cacti-docker</code>文件夹，执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></p>
<p>就可以看到两个容器正在启动，在控制台交替打印出日志。第一次启动的时间较长(需要安装cacti的模板)，大约几分钟。</p>
<p>看到输出<code>[Note] Starting httpd service.</code>时即可在浏览器中打开<code>http://localhost</code>，直接开始cacti的安装。</p>
<p>注意在这一步时<br><img src="/2017/10/19/cacti-develop-with-docker/cacti-template-setup.png" alt="选择模版"></p>
<p>选中所有的模板；</p>
<p>最后点<code>Finish</code>后等大概两分钟，就可看到登录页了,默认用户名和密码都是<code>admin</code>：</p>
<p><img src="/2017/10/19/cacti-develop-with-docker/cacti-login.png" alt="登录"></p>
<p>第一次登录会强制修改密码，进入后开始下一步的探索吧。<br>关闭的话在命令行按<code>Ctrl</code>+<code>C</code>。  </p>
<p>只要第一次运行的容器不删除，第二次要运行cacti也是在那个目录执行<code>docker-compose up</code>，此时cacti是直接运行的，无需再次安装。  </p>
<p>若想重新安装，则删除两个容器和cacti目录下的<code>install.lock</code>, 再执行<code>docker-compose up</code>。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>开发应该把注意力放在写代码上，而不是安装软件，感谢docker。</p>
]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>docker</tag>
        <tag>cacti</tag>
      </tags>
  </entry>
  <entry>
    <title>install Tensorflow on macOS</title>
    <url>/2018/03/01/install-tensorflow-on-macOS/</url>
    <content><![CDATA[<p>This is a simple note for installing TensorFlow from source on macOS.<br><a id="more"></a></p>
<h2 id="Install-python"><a href="#Install-python" class="headerlink" title="Install python"></a>Install python</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install python</span><br></pre></td></tr></table></figure>
<p>It will install Python-2.7.14. Type <code>python2.7</code> and check the version.</p>
<h2 id="Install-pip"><a href="#Install-pip" class="headerlink" title="Install pip"></a>Install pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>
<h2 id="Install-virtualenv"><a href="#Install-virtualenv" class="headerlink" title="Install virtualenv"></a>Install virtualenv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv --upgrade</span><br></pre></td></tr></table></figure>
<h2 id="Create-a-env"><a href="#Create-a-env" class="headerlink" title="Create a env"></a>Create a env</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">virtualenv --system-site-packages ~/tensorflow --python=python2.7</span><br></pre></td></tr></table></figure>
<h2 id="activate-the-env"><a href="#activate-the-env" class="headerlink" title="activate the env"></a>activate the env</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tensorflow</span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure>
<h2 id="Install-Tensorflow-from-source-code"><a href="#Install-Tensorflow-from-source-code" class="headerlink" title="Install Tensorflow from source code"></a>Install Tensorflow from source code</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew cask install caskroom/versions/java8</span><br><span class="line">brew install bazel</span><br><span class="line">pip install six numpy wheel</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow</span><br><span class="line"><span class="built_in">cd</span> tensorflow <span class="comment"># the source code dir</span></span><br><span class="line">git checkout r1.1 <span class="comment"># up to you</span></span><br><span class="line">./configure</span><br><span class="line">bazel build --local_resources 3072,4,1.0 --config=opt //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line">bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br><span class="line">pip install /tmp/tensorflow_pkg/tensorflow-1.6.0rc1-cp27-cp27m-macosx_10_12_x86_64.whl</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Deep Learning</tag>
        <tag>TensorFlow</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Write blog with Hexo</title>
    <url>/2018/01/24/write-blog-with-hexo/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><code>hexo</code> to write blog with Markdown syntax<br><code>github</code> to host the source files<br><code>webhook</code> to automaticlly update the blog in VPS<br><code>git submodule</code> to manage the Hexo theme<br><a id="more"></a></p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Add a new github respository(name it : github-id.github.io).<br>On your PC:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install hexo-cli -g <span class="comment"># Node.js required</span></span><br><span class="line">hexo init</span><br><span class="line">git init</span><br><span class="line"><span class="comment"># use branch 'hexo' to store the source files, branch 'master' to store the html files.</span></span><br><span class="line">git checkout -b hexo</span><br><span class="line">git remote add origin git@github.com:github-id/github-id.github.io.git</span><br><span class="line">hexo new <span class="string">"my-first-post"</span></span><br><span class="line"><span class="comment"># write blog</span></span><br><span class="line">hexo g <span class="comment"># generate static html files</span></span><br><span class="line">hexo s <span class="comment"># preview the blog on your pc(default: http://localhost:4000)</span></span><br></pre></td></tr></table></figure></p>
<p>Config the github repository in <code>_config.yml</code> :<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:github-id/github-id.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p>
<p>Deploy the blog.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d <span class="comment"># push html files to the master branch.</span></span><br></pre></td></tr></table></figure></p>
<p>Now open <a href="https://github-id.github.io" target="_blank" rel="noopener">https://github-id.github.io</a>, you can see your blog.  </p>
<h2 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h2><ol>
<li>Add a webhook of your blog’s github respository(branch <code>master</code>).(url example : <code>http://your-host/hook.php</code>)  </li>
<li><p>Edit <code>hook.php</code> in your VPS as follows:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$secret = <span class="string">'blog'</span>; <span class="comment"># must be same as the secret you type on github</span></span><br><span class="line">$signature = $_SERVER[<span class="string">'HTTP_X_HUB_SIGNATURE'</span>];</span><br><span class="line">$json = json_decode(file_get_contents(<span class="string">'php://input'</span>), <span class="keyword">true</span>);</span><br><span class="line">$cmd = <span class="string">"./deploy.sh"</span>;</span><br><span class="line"><span class="keyword">if</span>($signature)&#123;</span><br><span class="line">    $hash = <span class="string">"sha1="</span> . hash_hmac(<span class="string">'sha1'</span>, $HTTP_RAW_POST_DATA, $secret);</span><br><span class="line">    <span class="keyword">if</span> (strcmp($signature, $hash) == <span class="number">0</span> &amp;&amp; array_key_exists(<span class="string">'ref'</span>, $json)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> shell_exec($cmd);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">'X-PHP-Response-Code: 404'</span>, <span class="keyword">true</span>, <span class="number">404</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit <code>deploy.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../blog</span><br><span class="line"><span class="built_in">echo</span> `date +%D\ %T`&gt;&gt; ../hook/hook.log</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git clean -f</span><br><span class="line">git pull origin master &gt;&gt; ../hook/hook.log 2&gt;&gt;../hook/hook.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add deploy key(Read-only access is just fine) for the VPS in your respository:<br>(The example shown below is for <code>apache</code>)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /var/www/.ssh</span><br><span class="line">chown -R apache:apache /var/www/.ssh</span><br><span class="line">sudo -Hu apache ssh-keygen -t rsa</span><br><span class="line">cat /var/www/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>Copy the public key to add it in github respository.</p>
</li>
<li><p>Clone the repository on VPS folder <code>blog</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">chown -R apache:apache blog</span><br><span class="line">/usr/bin/sudo -Hu apache git <span class="built_in">clone</span> git@github.com:github-id/github-id.github.io.git blog</span><br><span class="line">``` </span><br><span class="line">7. Test webhook on your PC:  </span><br><span class="line">```sh</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git checkout master</span><br><span class="line">git commit -m <span class="string">"hook test"</span> --allow-empty</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>Then check the <code>hook.log</code> on VPS or just open <a href="http://your-donmain-name" target="_blank" rel="noopener">http://your-donmain-name</a> to check the blog.</p>
<h2 id="Theme-–-submodule"><a href="#Theme-–-submodule" class="headerlink" title="Theme – submodule"></a>Theme – submodule</h2><p>Fork the theme respository.(such as <code>hexo-theme-next</code>)<br>On your PC:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git checkout hexo</span><br><span class="line">git submodule add git@github.com:github-id/hexo-theme-next.git theme/next</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>So you can manage your blog content and theme in two respository separately.</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ol>
<li>Apply a SSL CA on <code>freessl.org</code>;  </li>
<li>Download the Certificate files(<code>domain.crt</code>, <code>domain.ca.crt</code>, <code>private.key</code>);  </li>
<li><p>Install necessary module:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install mod_ssl openssl</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit /etc/httpd/conf.d/ssl.conf:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SSLCertificateFile /path-to/domain.ca.crt</span><br><span class="line">SSLCertificateKeyFile /path-to/private.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>Force HTTPS on all pages(Optional)<br>Config the <code>&lt;Derictory&gt;</code> tag in <code>httpd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$</span><br><span class="line">RewriteRule ^(.*)?$ https://%&#123;SERVER_NAME&#125;/$1 [L,R]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restart apache:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="After-you-changed-your-PC"><a href="#After-you-changed-your-PC" class="headerlink" title="After you changed your PC :"></a>After you changed your PC :</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:github-id/github-id.github.io.git</span><br><span class="line"><span class="built_in">cd</span> github-id.github.io</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">hexo new <span class="string">"new-post-name"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>webhook</tag>
        <tag>submodule</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>learn python</title>
    <url>/2018/03/26/learn-python/</url>
    <content><![CDATA[<p>Note for python functions.<br><a id="more"></a></p>
<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter()"></a><a href="http://www.pythoner.com/205.html" target="_blank" rel="noopener">Counter()</a></h2><h2 id="most-common"><a href="#most-common" class="headerlink" title="most_common()"></a><a href="http://www.pythoner.com/205.html" target="_blank" rel="noopener">most_common()</a></h2><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a><a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.sum.html#numpy.sum" target="_blank" rel="noopener">sum</a></h2><p>Calculate the summary of ndarray a according to the given axis, axis is a integer or tuple</p>
<h2 id="argsort"><a href="#argsort" class="headerlink" title="argsort"></a><a href="">argsort</a></h2><p>返回数组的排序索引（从小到大），若为矩阵可指定轴。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">2</span></span><br><span class="line">x = np.array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">top_k_idx = np.argsort(x[<span class="number">0</span>])[:k]</span><br><span class="line">print(x)</span><br><span class="line">print(top_k_idx)</span><br><span class="line"></span><br><span class="line">top_k = np.argsort(x, axis=<span class="number">1</span>)</span><br><span class="line">print(top_k)</span><br></pre></td></tr></table></figure></p>
<h2 id="np-square"><a href="#np-square" class="headerlink" title="np.square"></a>np.square</h2><p><code>np.square</code>是用c实现的，比<code>**</code>快多了😭。 661s:36s.</p>
<h2 id="np-linalg-norm"><a href="#np-linalg-norm" class="headerlink" title="np.linalg.norm"></a>np.linalg.norm</h2><p>求<a href="https://blog.csdn.net/shijing_0214/article/details/51757564" target="_blank" rel="noopener">范数</a>，L1范数-&gt;曼哈顿距离（L1距离），L2范数-&gt;欧氏距离（L2距离）<a href="https://blog.csdn.net/hqh131360239/article/details/79061535" target="_blank" rel="noopener">np.linalg.norm</a></p>
<h2 id="vstack-hstack"><a href="#vstack-hstack" class="headerlink" title="vstack, hstack"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html" target="_blank" rel="noopener">vstack, hstack</a></h2><p><a href="https://blog.csdn.net/csdn15698845876/article/details/73380803" target="_blank" rel="noopener">refer</a></p>
<h2 id="array-split"><a href="#array-split" class="headerlink" title="array_split"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_split.html" target="_blank" rel="noopener">array_split</a></h2><h2 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate"></a><a href="https://blog.csdn.net/garfielder007/article/details/51378296" target="_blank" rel="noopener">concatenate</a></h2><h2 id="np-random-choice"><a href="#np-random-choice" class="headerlink" title="np.random.choice"></a>np.random.choice</h2><p>生成随机序列，可指定范围或来源于某个数组。</p>
<h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><p>改变矩阵为指定形状</p>
<h2 id="mean"><a href="#mean" class="headerlink" title="mean"></a>mean</h2><p>求平均值，可指定matrix的轴</p>
<h2 id="fmax-x1-x2"><a href="#fmax-x1-x2" class="headerlink" title="fmax(x1, x2)"></a>fmax(x1, x2)</h2><p>Compare two arrays and returns a new array containing the element-wise maxima. x2可以是一个数。</p>
<h2 id="numpy-random-randn-d0-d1-…-dn"><a href="#numpy-random-randn-d0-d1-…-dn" class="headerlink" title="numpy.random.randn(d0, d1, …, dn)"></a>numpy.random.randn(d0, d1, …, dn)</h2><p>从标准正态分布中返回一个或多个样本值。</p>
<h2 id="numpy-random-rand-d0-d1-…-dn"><a href="#numpy-random-rand-d0-d1-…-dn" class="headerlink" title="numpy.random.rand(d0, d1, …, dn)"></a>numpy.random.rand(d0, d1, …, dn)</h2><p>随机样本位于[0, 1)中。</p>
<h2 id="xa0-n"><a href="#xa0-n" class="headerlink" title="\xa0 \n"></a>\xa0 \n</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'T-shirt\xa0\xa0短袖圆领衫,体恤衫\xa0'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out = <span class="string">""</span>.join(s.split())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out</span><br><span class="line"><span class="string">'T-shirt短袖圆领衫,体恤衫'</span></span><br></pre></td></tr></table></figure>
<h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a><a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" target="_blank" rel="noopener">list comprehension</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = [ expression(i) <span class="keyword">for</span> i <span class="keyword">in</span> old_list <span class="keyword">if</span> filter(i)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">'votes'</span>: &#123;<span class="string">'funny'</span>: <span class="number">0</span>, <span class="string">'useful'</span>: <span class="number">5</span>, <span class="string">'cool'</span>: <span class="number">2</span>&#125;,</span><br><span class="line"> <span class="string">'user_id'</span>: <span class="string">'rLtl8ZkDX5vH5nAx9C3q5Q'</span>,</span><br><span class="line"> <span class="string">'review_id'</span>: <span class="string">'fWKvX83p0-ka4JS3dc6E5A'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>votes = pd.DataFrame([i[<span class="string">'votes'</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data]) <span class="comment"># data is a list which element is dict.</span></span><br></pre></td></tr></table></figure>
<h2 id="np-random-shuffle"><a href="#np-random-shuffle" class="headerlink" title="np.random.shuffle()"></a>np.random.shuffle()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: x = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: x</span><br><span class="line">Out[<span class="number">27</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: np.random.shuffle(x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: x</span><br><span class="line">Out[<span class="number">29</span>]: array([<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h2 id="pandas-Dataframe-get-rows-by-index-array"><a href="#pandas-Dataframe-get-rows-by-index-array" class="headerlink" title="pandas Dataframe get rows by index array"></a>pandas Dataframe get rows by index array</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    x_num = data.shape[<span class="number">0</span>]</span><br><span class="line">    x_idx = np.arange(x_num)</span><br><span class="line">    np.random.shuffle(x_idx)</span><br><span class="line">    x_idx_train = x_idx[<span class="number">0</span> : int(x_num*<span class="number">0.7</span>)]</span><br><span class="line">    x_idx_test = x_idx[int(x_num*<span class="number">0.7</span>) : ]</span><br><span class="line">    train = data.iloc[x_idx_train]</span><br><span class="line">    test = data.iloc[x_idx_test]</span><br><span class="line">    <span class="keyword">return</span> train, test</span><br></pre></td></tr></table></figure>
<h2 id="str-clean"><a href="#str-clean" class="headerlink" title="str clean"></a>str clean</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">''</span>.join(str1.split()) <span class="comment"># remove '\n','\xa0'</span></span><br></pre></td></tr></table></figure>
<h2 id="pandas-add-a-column-to-a-Daraframe"><a href="#pandas-add-a-column-to-a-Daraframe" class="headerlink" title="pandas : add a column to a Daraframe"></a>pandas : add a column to a Daraframe</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_df[<span class="string">'cool'</span>] = votes[<span class="string">'cool'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="pandas-groupby-mean"><a href="#pandas-groupby-mean" class="headerlink" title="pandas : groupby mean"></a>pandas : groupby mean</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_df.groupby(<span class="string">'stars'</span>).mean()</span><br></pre></td></tr></table></figure>
<h2 id="pandas-group-and-count-unique-values"><a href="#pandas-group-and-count-unique-values" class="headerlink" title="pandas : group and count unique values"></a>pandas : group and count unique values</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">srcIp_Host_count = df.groupby(by=<span class="string">'srcIp'</span>)[<span class="string">'requestHost'</span>].nunique()</span><br></pre></td></tr></table></figure>
<h2 id="pandas-：SettingwithCopyWarning"><a href="#pandas-：SettingwithCopyWarning" class="headerlink" title="pandas ：SettingwithCopyWarning"></a><a href="https://www.jianshu.com/p/72274ccb647a" target="_blank" rel="noopener">pandas ：SettingwithCopyWarning</a></h2><h2 id="pandas-reindex-，-reset-index"><a href="#pandas-reindex-，-reset-index" class="headerlink" title="pandas : reindex() ， reset_index()"></a>pandas : reindex() ， reset_index()</h2><p>reindex() 是取出index为参数中指定的行<br>reset_index() 才是重置索引</p>
<h2 id="pandas-apply-也可用做遍历df的操作"><a href="#pandas-apply-也可用做遍历df的操作" class="headerlink" title="[pandas : apply 也可用做遍历df的操作]"></a>[pandas : apply 也可用做遍历df的操作]</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_character</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="string">'''去掉所有非中文字符'''</span></span><br><span class="line">    pattern1=<span class="string">'[a-zA-Z0-9]'</span></span><br><span class="line">    pattern2 = <span class="string">'\[.*?\]'</span></span><br><span class="line">    pattern3 = re.compile(<span class="string">u'[^\s1234567890:：'</span> + <span class="string">'\u4e00-\u9fa5]+'</span>)</span><br><span class="line">    pattern4=<span class="string">'[’!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~]+'</span></span><br><span class="line">    <span class="keyword">if</span> len(item[<span class="string">'content'</span>]) == <span class="number">0</span>:</span><br><span class="line">        item[<span class="string">'content'</span>] = item[<span class="string">'title'</span>]</span><br><span class="line">    line1=re.sub(pattern1,<span class="string">''</span>,item[<span class="string">'content'</span>])   <span class="comment">#去除英文字母和数字</span></span><br><span class="line">    line2=re.sub(pattern2,<span class="string">''</span>,line1)   <span class="comment">#去除表情</span></span><br><span class="line">    line3=re.sub(pattern3,<span class="string">''</span>,line2)   <span class="comment">#去除其它字符</span></span><br><span class="line">    line4=re.sub(pattern4, <span class="string">''</span>, line3) <span class="comment">#去掉残留的冒号及其它符号</span></span><br><span class="line">    item[<span class="string">'content'</span>]=<span class="string">''</span>.join(line4.split()) <span class="comment">#去除空白</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">data = data.apply(clear_character, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="jupyter-允许外网访问"><a href="#jupyter-允许外网访问" class="headerlink" title="jupyter 允许外网访问"></a>jupyter 允许外网访问</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook --ip=&lt;host_ip&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>android-auto-script</title>
    <url>/2018/08/15/android-auto-script/</url>
    <content><![CDATA[<p>Note while developing an Android script to auto comment in an APP.<br><a id="more"></a></p>
<h2 id="Floating-Window"><a href="#Floating-Window" class="headerlink" title="Floating Window"></a>Floating Window</h2><p><a href="https://www.jianshu.com/p/ac63c57d2555" target="_blank" rel="noopener">https://www.jianshu.com/p/ac63c57d2555</a> (Global)<br><a href="https://www.jianshu.com/p/95ceb0a2ed27" target="_blank" rel="noopener">https://www.jianshu.com/p/95ceb0a2ed27</a><br><a href="https://github.com/yhaolpz/FloatWindow" target="_blank" rel="noopener">https://github.com/yhaolpz/FloatWindow</a> (can only be used in an APP)  </p>
<h2 id="Decompile-APK"><a href="#Decompile-APK" class="headerlink" title="Decompile APK"></a>Decompile APK</h2><p><a href="https://blog.csdn.net/guolin_blog/article/details/49738023" target="_blank" rel="noopener">https://blog.csdn.net/guolin_blog/article/details/49738023</a></p>
<h2 id="adb-shell-input-text-‘你好’"><a href="#adb-shell-input-text-‘你好’" class="headerlink" title="adb shell input text ‘你好’"></a>adb shell input text ‘你好’</h2><p><a href="https://github.com/senzhk/ADBKeyBoard" target="_blank" rel="noopener">https://github.com/senzhk/ADBKeyBoard</a></p>
<h2 id="execute-shell-comands-in-Java-code"><a href="#execute-shell-comands-in-Java-code" class="headerlink" title="execute shell comands in Java code"></a>execute shell comands in Java code</h2><p><a href="https://github.com/jaredrummler/AndroidShell" target="_blank" rel="noopener">https://github.com/jaredrummler/AndroidShell</a></p>
<h2 id="CountDownTimer"><a href="#CountDownTimer" class="headerlink" title="CountDownTimer"></a>CountDownTimer</h2><p><code>CountDownTimer</code> must be canceled explicitly in <code>onDestroy</code> in a <code>Service</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (countDownTimer1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">    countDownTimer1.cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>android</tag>
        <tag>reading list</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackintosh note</title>
    <url>/2018/04/11/Hackintosh-note/</url>
    <content><![CDATA[<p>Some useful tips for using macOS.<br><a id="more"></a></p>
<h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h2><p>破解后每次开机都提示访问通讯录<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo codesign -f -d -s - /Applications/Alfred\ 3.app/Contents/Frameworks/Alfred\ Framework.framework/Versions/A/Alfred\ Framework</span><br></pre></td></tr></table></figure></p>
<h2 id="Video-player"><a href="#Video-player" class="headerlink" title="Video player"></a>Video player</h2><p>自带的QuickTime Player不能切换音轨<br><a href="https://github.com/lhc70000/iina" target="_blank" rel="noopener">IINA</a>，<br><a href="https://www.videolan.org/vlc/index.html" target="_blank" rel="noopener">VLC</a></p>
<h2 id="根据当前输入法让菜单栏显示不同颜色"><a href="#根据当前输入法让菜单栏显示不同颜色" class="headerlink" title="根据当前输入法让菜单栏显示不同颜色"></a>根据当前输入法让菜单栏显示不同颜色</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew cask install showyedge</span><br></pre></td></tr></table></figure>
<h2 id="jupyter-themes"><a href="#jupyter-themes" class="headerlink" title="jupyter themes"></a><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">jupyter themes</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyterthemes</span><br><span class="line">jt -l</span><br><span class="line">jt -t onedork -T -f sourcemed</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Break the wa11 by v2ray</title>
    <url>/2018/10/12/method-of-break-the-wa11-by-v2ray/</url>
    <content><![CDATA[<h1 id="Check-the-time-VPS-and-your-host"><a href="#Check-the-time-VPS-and-your-host" class="headerlink" title="Check the time (VPS and your host)"></a>Check the time (VPS and your host)</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date -r</span><br></pre></td></tr></table></figure>
<p>Make sure the distance between them is smaller than 2 minutes. Different timezone is OK.<br><a id="more"></a></p>
<h1 id="install-v2ray"><a href="#install-v2ray" class="headerlink" title="install v2ray"></a>install v2ray</h1><p>There is no difference between servers and clients. They differ by configurations.</p>
<ul>
<li>Linux</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<ul>
<li>macOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap v2ray/v2ray</span><br><span class="line">brew install v2ray-core</span><br><span class="line">brew info v2ray-core</span><br></pre></td></tr></table></figure>
<h1 id="customize-your-configuration-refer"><a href="#customize-your-configuration-refer" class="headerlink" title="customize your configuration (refer)"></a>customize your configuration (<a href="https://yuan.ga/v2ray-complete-tutorial/" target="_blank" rel="noopener">refer</a>)</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>
<p><code>jq</code> can verify the format of json.<br>Or just test the configuration by v2ray itself:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v2ray -test -config=./config.json</span><br></pre></td></tr></table></figure>
<h1 id="Start-your-server"><a href="#Start-your-server" class="headerlink" title="Start your server"></a>Start your server</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray</span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure>
<h1 id="Start-your-client"><a href="#Start-your-client" class="headerlink" title="Start your client"></a>Start your client</h1><ul>
<li>macOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v2ray -config=./config.json</span><br></pre></td></tr></table></figure>
<p>Or use brew (auto restart at login) :<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew services start v2ray/v2ray/v2ray-core</span><br></pre></td></tr></table></figure></p>
<ul>
<li>macOS GUI :v2rayX</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew cask install v2rayx</span><br></pre></td></tr></table></figure>
<p>I suggest that configure the v2rayX manully, because the import method doesn’t work on my machine.</p>
<p>V2rayX will configure the system proxy automaticly, so <code>SwitchOmega</code> is not necessary.</p>
<ul>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.v2ray.ang&amp;hl=en_US" target="_blank" rel="noopener">v2rayNG</a></li>
</ul>
<h1 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h1><p>There is no worry any more about my study!!!😂</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>tools</tag>
        <tag>wa11</tag>
        <tag>v2ray</tag>
        <tag>privacy</tag>
      </tags>
  </entry>
  <entry>
    <title>oneindex refer test</title>
    <url>/2020/02/16/oneindex-refer-test/</url>
    <content><![CDATA[<video><source src="http://gggg.is-best.net/?/Video/Movie/%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%AE%A2%E4%BA%BA%20%E9%AB%98%E6%B8%851080p.mp4" type="video/mp4"></video>]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>lesson from wechat group</title>
    <url>/2020/02/21/lesson-from-wechat-group/</url>
    <content><![CDATA[<p>有时候真话很难听。<br>大多数人是不喜欢听真话的。<br>说难听的真话会让人不舒服。<br>要学会在真话里添些佐料，或者不去谈论，或者换种方式。<br><a id="more"></a><br>想起来刚看过陈凯歌的《妖猫传》，竟不想在现实里真来了一回。</p>
<blockquote>
<p>到了片尾，空海说“通过杨玉环的生死参透了无上密”，白居易说“一字不改，诗是假的，可情是真的”。白居易也参透了无上密。<br>也就是说两个人都明白了一个道理：这个世界是由真相与谎言交织成的，我们要认识到这一点，不要否认现实。同时，如何对待这样的世界呢？接纳谎言，用力地拥抱真相。也可以延伸为：明白这个世界有残酷、无情、虚假的部分，但我不因此厌世，而是将这一部分搁置，用力去珍惜这个世界一点一滴的美好，这样就能得到内心的平静。<br>这也解释了那个抱孩妇人的事情。<br>空海问她为什么平静。她回答：“只要孩子睡着就好了。”也就是说，即使这个世界有惊涛骇浪，但毕竟还有美好的部分，我把我的精力全都用来拥抱这美好、品味这美好，自然无暇去为惊涛骇浪而惊慌了。<br><a href="https://movie.douban.com/review/9011512/" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<p>不同的人（尤其是不同年龄、时代的人）对同一事物（特别是新生事物）的理解能力是不一样的。思维能力和价值观也会有很大差异，所以，不要去强求别人去理解你的观点或者认同你的价值观。<br>如果想输出价值观的话，还是要好好考虑方式方法。  </p>
<p>真理总是掌握在少数人的手里，那些实在不能明理的人，不要去强求了。你救不了他们。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>当你看过世界</title>
    <url>/2020/04/27/nothing/</url>
    <content><![CDATA[<p>..<br><a id="more"></a><br>现在每天似乎都有焦虑在伴随着我。<br>悲观，抑郁，丧，或许就是现在的我吧。<br>吃完午饭，刷个朋友圈，一个班的同学在知乎上发表了一篇NLP领域的文章。打开链接，读过文章，却不能领略其中一二，评论区也有著名导师、大牛师兄纷纷称赞。<br>是羡慕吗，还是嫉妒？不管是什么，又有什么用。<br>每天做着毫无意义的工作，没有能力的提升，<br>未来会怎么样，<br>当你知道你穷极一生也没办法过上自己向往的生活，实现自己的价值，你会怎么想。<br>是该妥协吗，<br>老老实实的做个平凡人，<br>你的出身没办法改变，<br>原来人在出生的时候就到达了顶点。<br>想这些又有什么用，<br>觉得活着太累，没有希望，<br>可你家里只有自己，<br>连离开的权利都被剥夺。<br>当你看着别人过着你想要的生活，<br>燃起过无数次希望，<br>也绝望过无数次，<br>没有意义。  </p>
<p>当你看过世界，<br>却发现世界并不是你的。  </p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>使用frp进行内网穿透</title>
    <url>/2021/01/09/access-a-host-behind-a-NAT-via-frp/</url>
    <content><![CDATA[<p>使用frp进行内网穿透，实现在外网访问位于内网没有公有IP的主机。<br><a id="more"></a></p>
<p>需要：有公有IP的外网主机一个, 作为 Server 转发内网主机的流量，可以自己买个配置低一点的VPS。</p>
<h3 id="在公网主机上配置-Server-端："><a href="#在公网主机上配置-Server-端：" class="headerlink" title="在公网主机上配置 Server 端："></a>在公网主机上配置 Server 端：</h3><ul>
<li><p>从GitHub下载程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">tar xvzf frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.34.3_linux_amd64 </span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>Server 端配置(tcp模式)：<br>（可以使用 stcp 模式给连接添加密钥，还有一种是 xtcp 通过 P2P 的方式连接，连接成功后不走服务器流量。但这两种方式需要在自己的机器上也运行一个 frpc，考虑到有时候可能需要用平板连，遂放弃。具体参考：<a href="https://github.com/fatedier/frp#expose-your-service-privately" target="_blank" rel="noopener">stcp</a>, <a href="https://github.com/fatedier/frp#p2p-mode" target="_blank" rel="noopener">xtcp</a>）  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> frps.ini</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash">dashboard_port = 7500</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Server 端:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在内网主机上配置-Client-端"><a href="#在内网主机上配置-Client-端" class="headerlink" title="在内网主机上配置 Client 端"></a>在内网主机上配置 Client 端</h3><ul>
<li><p>从github下载程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">tar xvzf frp_0.34.3_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.34.3_linux_amd64 </span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>Client 端配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = server.ip</span><br><span class="line">server_port = 7000</span><br><span class="line">login_fail_exit = false</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Client 端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可能需要在 VPS 的控制台上允许流量通过指定的端口(如该例中为 7000,6000)。 </p>
<h3 id="在自己的机器上连接"><a href="#在自己的机器上连接" class="headerlink" title="在自己的机器上连接"></a>在自己的机器上连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -oPort=6000 user@server.ip</span><br></pre></td></tr></table></figure>
<h3 id="开机自动启动服务"><a href="#开机自动启动服务" class="headerlink" title="开机自动启动服务"></a>开机自动启动服务</h3><p>上面启动服务端和客户端的方式随着 Terminal 的关闭进程会停止，当然可以用 nohup 的方式在后台运行，但如果重启机器就不会自动启动。所以根据具体的 OS 配置开机自启服务。</p>
<h4 id="Server-Debian-10"><a href="#Server-Debian-10" class="headerlink" title="Server(Debian 10)"></a>Server(Debian 10)</h4><ul>
<li><p>安装supervisor</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install supervisor</span><br><span class="line">sudo vim /etc/supervisor/conf.d/frp.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>frp.conf :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:frp]</span><br><span class="line">command = /path/to/frps -c /path/to/frps.ini</span><br><span class="line">autostart = true</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart supervisor</span><br><span class="line">sudo supervisorctl status</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Client-CentOS-7"><a href="#Client-CentOS-7" class="headerlink" title="Client(CentOS 7)"></a>Client(CentOS 7)</h4><ul>
<li><p>拷贝程序和配置文件并编辑service文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp frpc /usr/bin/frpc</span><br><span class="line">sudo cp frpc.ini /etc/frp/frpc.ini</span><br><span class="line">sudo vim /usr/lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>frpc.service :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Client Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动frpc：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable frpc</span><br><span class="line">sudo systemctl start frpc</span><br><span class="line">sudo systemctl status frpc</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a><br><a href="https://free-e.net/109" target="_blank" rel="noopener">frp自动启动</a>  </p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS Markdown 预览和 lsd 进程占用 CPU</title>
    <url>/2021/01/28/resolve-macOS-preview-problems/</url>
    <content><![CDATA[<p>Mac 上一直用“一指禅”预览文件，但是它本身不支持 Markdown 文件的预览，所以用 brew 装了 <a href="https://github.com/toland/qlmarkdown" target="_blank" rel="noopener">qlmarkdown</a> 这个插件。但不知从什么时候起，可能是某次 OS 版本更新之后吧，就不能预览 Markdown 文件了。<br><a id="more"></a></p>
<h2 id="初现端倪"><a href="#初现端倪" class="headerlink" title="初现端倪"></a>初现端倪</h2><p>在 github 的 issue 里找到了这个 <a href="https://github.com/toland/qlmarkdown/issues/39" target="_blank" rel="noopener">issue 39</a>, 说只能预览 <code>.markdown</code> 扩展名的文件，于是我把 <code>.md</code> 文件的扩展名改成了 <code>.markdown</code>，果真可以预览了，看来问题是一样的。</p>
<p>于是我就往下翻评论，看到了有个老哥给出了下面的这个命令，重建 Launch Service 数据库，有人说有用，我就尝试了一下。结果马上就能预览 <code>.md</code> 扩展名的文件了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user ; killall Dock</span><br></pre></td></tr></table></figure>
<h2 id="节外生枝"><a href="#节外生枝" class="headerlink" title="节外生枝"></a>节外生枝</h2><p>但又一个问题出现了：<code>lsd</code> 进程一直在占用 30-40%的cpu，有时候能到 100%，过了一天（22小时）之后还是如此，用<code>Monitor</code>看了一下，磁盘写入量达到了 46G，这也太不正常了，于是又找解决方法。</p>
<p>然后看到了这个<a href="https://www.logcg.com/archives/3382.html#comment-109590" target="_blank" rel="noopener">/usr/libexec/lsd 占用 100% CPU 的解决办法</a>，发现有两个命令，一个和上面的相同，另一个如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /System/Library/Frameworks -type f -name "lsregister" -exec &#123;&#125; -kill -seed -r \;</span><br></pre></td></tr></table></figure>
<p>这篇文章说这两个命令是一样的，其实参数不一样。在 <code>lsd</code> 持续占用 CPU时，我运行了下面这个命令，效果立竿见影，<code>lsd</code>马上就不占用 CPU了。就在我以为万事大吉，准备收工，这篇记录写了一半时，我突然发现 Markdown 的预览又不起作用了，，，重启无效，，，</p>
<h2 id="峰回路转"><a href="#峰回路转" class="headerlink" title="峰回路转"></a>峰回路转</h2><p>正当我欲哭无泪时，我想到了 Finder 的一些插件经常会冲突，比如坚果云和 OneDrive 的文件同步状态显示插件就经常失效，需要在系统设置里的插件设置中重启一下才行。我就想会不会是和别的预览插件冲突了。除了 qlmarkdown 之外，我还装了 qlcolorcode 用于在预览源代码文件时提供语法高亮等。然后列出了一下 <code>~/Library/QuickLook</code> 目录，准备一个一个排除。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrwxr-xr-x   1 yg  staff    73B 11 12  2019 NSQuickLookPlugin.qlgenerator -&gt; /Applications/Nutstore.app/Contents/PlugIns/NSQuickLookPlugin.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B 12 16 03:36 QLColorCode.qlgenerator</span><br><span class="line">drwxr-xr-x   3 yg  staff    96B 10 22  2019 QLMarkdown.qlgenerator</span><br><span class="line">drwxr-xr-x   3 yg  staff    96B  2  4  2020 QLStephen.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  7 18  2016 QuickLookASE.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  2  3  2013 QuickLookCSV.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B 10 22  2019 QuickLookJSON.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  2 28  2018 WebpQuickLook.qlgenerator</span><br><span class="line">drwxr-xr-x@  3 yg  staff    96B  3 24  2019 qlImageSize.qlgenerator</span><br></pre></td></tr></table></figure></p>
<p>第一个就是坚果云的，其实我首先想到的是quicklook插件似乎是在 <code>Info.plist</code> 里声明了 preview 的文件类型，在这里还有一个冷知识：</p>
<blockquote>
<p>Launch Service 是用于将文件类型和打开该类型文件的程序关联起来的。<br>macOS 中的文件类型并不是靠文件的扩展名区分的，而是文件的 <code>kMDItemContentType</code>,可以用以下命令查看一个文件的类型：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mdls README.md</span></span><br><span class="line">_kMDItemDisplayNameWithExtensions      = "README.md"</span><br><span class="line">kMDItemContentCreationDate             = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemContentCreationDate_Ranking     = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemContentModificationDate         = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemContentModificationDate_Ranking = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemContentType                     = "net.daringfireball.markdown"</span><br><span class="line">kMDItemContentTypeTree                 = (</span><br><span class="line">    "net.daringfireball.markdown",</span><br><span class="line">    "public.plain-text",</span><br><span class="line">    "public.text",</span><br><span class="line">    "public.data",</span><br><span class="line">    "public.item",</span><br><span class="line">    "public.content"</span><br><span class="line">)</span><br><span class="line">kMDItemDateAdded                       = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemDateAdded_Ranking               = 2021-01-26 00:00:00 +0000</span><br><span class="line">kMDItemDisplayName                     = "README.md"</span><br><span class="line">kMDItemDocumentIdentifier              = 0</span><br><span class="line">kMDItemFSContentChangeDate             = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemFSCreationDate                  = 2021-01-26 18:22:18 +0000</span><br><span class="line">kMDItemFSCreatorCode                   = ""</span><br><span class="line">kMDItemFSFinderFlags                   = 0</span><br><span class="line">kMDItemFSHasCustomIcon                 = (null)</span><br><span class="line">kMDItemFSInvisible                     = 0</span><br><span class="line">kMDItemFSIsExtensionHidden             = 0</span><br><span class="line">kMDItemFSIsStationery                  = (null)</span><br><span class="line">kMDItemFSLabel                         = 0</span><br><span class="line">kMDItemFSName                          = "README.md"</span><br><span class="line">kMDItemFSNodeCount                     = (null)</span><br><span class="line">kMDItemFSOwnerGroupID                  = 20</span><br><span class="line">kMDItemFSOwnerUserID                   = 501</span><br><span class="line">kMDItemFSSize                          = 2550</span><br><span class="line">kMDItemFSTypeCode                      = ""</span><br><span class="line">kMDItemInterestingDate_Ranking         = 2021-01-27 00:00:00 +0000</span><br><span class="line">kMDItemKind                            = "Markdown"</span><br><span class="line">kMDItemLastUsedDate                    = 2021-01-27 03:35:22 +0000</span><br><span class="line">kMDItemLastUsedDate_Ranking            = 2021-01-27 00:00:00 +0000</span><br><span class="line">kMDItemLogicalSize                     = 2550</span><br><span class="line">kMDItemPhysicalSize                    = 4096</span><br><span class="line">kMDItemUseCount                        = 2</span><br><span class="line">kMDItemUsedDates                       = (</span><br><span class="line">    "2021-01-26 16:00:00 +0000"</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>所以我先检查了 <code>NSQuickLookPlugin.qlgenerator</code> 的 <code>Info.plist</code> 中的 <code>LSItemContentTypes</code> 的值，但并没找到任何与 <code>qlmarkdown</code> 冲突的部分。所以还是直接卸载坚果云试试，反正现在也不用坚果云了。</p>
<h2 id="万事大吉"><a href="#万事大吉" class="headerlink" title="万事大吉"></a>万事大吉</h2><p>然后， qlmarkdown works fine❕❕❕😭</p>
<p>此时此刻，我只想说：Stupid software。</p>
<p>或许这篇记录现在可以改名为 <code>坚果云引发的惨案</code>。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/toland/qlmarkdown/issues/39" target="_blank" rel="noopener">qlmarkdown issue 39</a><br><a href="https://www.logcg.com/archives/3382.html#comment-109590" target="_blank" rel="noopener">/usr/libexec/lsd 占用 100% CPU 的解决办法</a>  </p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>shell</tag>
        <tag>qlmarkdown</tag>
        <tag>qlcolorcode</tag>
        <tag>preview</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭琐事</title>
    <url>/2021/02/03/something-about-family/</url>
    <content><![CDATA[<p>看完这个，你有可能会了解更多的我。但是看的过程可能会很压抑。<br>如果只是想和我交流技术，是没必要点开的。<br><a id="more"></a></p>
<p>我能拯救他们吗？</p>
<h2 id="2021-01-28"><a href="#2021-01-28" class="headerlink" title="2021/01/28"></a>2021/01/28</h2><p>和爸妈争论。尊重、理解（或许在我心里，还有教育吧）</p>
<h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><h2 id="2021-02-03"><a href="#2021-02-03" class="headerlink" title="2021/02/03"></a>2021/02/03</h2><p>今天吃早饭的时候又和我妈吵了起来。 </p>
<p>背景：我们家是自己装的暖气，靠烧炭的火炉子加热水循环把暖气烧热，我那屋平时因为见阳光比较少，而且刚盖的浴室又把窗子挡住了，地板砖散热也很快，而且我屋子的西墙外面是没有水泥的，砖都在外面露着，所以保温效果差一些，比爸妈平时在的堂屋要冷，大概堂屋14-15度，我这10度左右。</p>
<p>我：我屋里比较冷，你能不能给炉子多加点碳别老是闷着炉子?<em>（昨天就是这样，我自己加了点碳，把炉子的风门打开好让火烧得旺一些，可我下次去加碳的时候发现我妈又把风门关上了，，，）</em>  </p>
<p>👩：冷你多穿衣服啊。  </p>
<p>我：我身上不冷，就是手冷。以前我们还笑话人家烧暖气舍不得加碳，现在想想，真是，，，用暖气还不如以前点炉子暖和呢。<em>（以前没安暖气的时候是用烧碳的火炉子取暖，想暖和点只能离炉子近一点。）</em></p>
<p>👩：人家谁烧暖气加那么多碳啊，一天一二百斤碳是暖和，碳不花钱啊？</p>
<p>我：那我们烧暖气是为了啥，不是为了取暖吗，可现在也不暖和啊，不如干脆别烧了。</p>
<p>👩：让你多穿点衣裳你不听。</p>
<p>我：我说了是手冷，，，</p>
<p>然后我忘了又说了几句啥，反正妈反反复复就那几句“穿衣服”、“省钱”，正好我爸这几天去照顾我爷爷奶奶，然后说我们爷俩都不听话，都和她吵。然后又是经典的说我爷爷奶奶怎么怎么。说着说着哭了起来，说我回来之前偷看我爸手机，看到我二姑给我爸介绍女人，问他喜欢啥样的，她说我爸他还生气。我说怎么可能。她说自己知道偷看我爸手机不对，但是我二姑老是用微信给他发快手上的女人那不是破坏我们的家庭吗。我说那不是快手上的视频吗。我看她哭了就一直安慰她，跟她说那些什么喜欢啥的消息都是快手上的视频标题而已，我还用微信给她分享了Bilibili的一个视频，给她解释那是视频的标题。然后她又说起来奶奶怎么作妖。</p>
<p><em>（从前两年开始，我奶奶就说自己不能做饭了，其实她以前身子骨一直很硬朗，反倒是我爷爷一直老年痴呆，我妈和大娘姑姑他们就一直怀疑她装病，因为她以前确实有装过。然后我爸和大伯还有两个姑姑那年过年的时候就商量轮流照顾爷爷奶奶，这个月刚好轮到我爸了。）</em></p>
<p>然后说我爸天天喝酒，怎么劝都不听。<em>（我爸喝酒也是很多年了，大概从年轻的时候起就好喝酒，但是酒量不大，以前每次过年走亲戚的时候都是噩梦，我和我妈都劝过他很多次，我是直接跟他说过喝酒有什么危害，对身体的、对精神的；也在朋友圈转发各种关于饮酒危害和养生之类的，但是都没有什么效果。我也特别恨那些给我爸劝酒的，要不是顾忌着我爸妈的面子，我怕是早就把亲戚家的桌子掀个遍了。）</em></p>
<p>我安慰她一会儿，她不哭了。我反而愣在那里，不知所措，不知该向谁倾诉。（之前和爸妈吵架的时候和一位好友倾诉过，感谢这位天使当我的情绪垃圾桶，也给了我许多力量。）</p>
<p>如果说他们把自己的孩子视作“希望”的话，我的“希望”又在哪里？我将来的孩子吗？那对于ta来说是公平的吗？</p>
<p>我宁可不要这“希望”，也不要让ta承受这些。所以将来还是不要再继续了吧，如果是悲剧的话，也在我身上结束吧。</p>
<h2 id="2021-02-05"><a href="#2021-02-05" class="headerlink" title="2021/02/05"></a>2021/02/05</h2><p>回堂屋拿鼠标垫的时候路过爸妈卧室窗口，又听见我妈在自言自语，进堂屋门后我妈也从卧室里出来了，随口问了一句“说啥呢”，我妈：“说你爸呢。” “我爸又咋了？” 后面大致是说我爸把挣得钱都存银行卡里，也不考虑家里生活要用。后面又说去年刚盖的浴室还没和人家结账，自己前几年打工老板欠的工资也没要回来，说小年那天老板回来去要的也不知道去没去。然后说我爸的朋友要在市里买房子跟我爸借钱，不让他借还生气。中间还提及去年在家里盖浴室的时候买沙子我还取了5000，然后我妈说那不是你爸给你的吗，我说不是，当时你要的很急，好像也在生我爸的气在气头上，我当时手里也有，就直接取了没说。</p>
<p>我妈又说我爸的朋友跟我爸借钱，朋友的亲戚也跟我爸借钱，都想骗我爸。</p>
<h3 id="晚上吃完饭他们又吵架了"><a href="#晚上吃完饭他们又吵架了" class="headerlink" title="晚上吃完饭他们又吵架了"></a>晚上吃完饭他们又吵架了</h3><p>我爸晚上回来吃饭了。因为明天去找以前的包工头要工资，中午让我妈去给爷爷奶奶做饭。我爸顺便说晚上给他俩盖好几床被子但我奶奶晚上总是不好好睡觉掉床底下，然后喊我爸给她盖被子去。我妈就说别理她，什么总是装着折腾人。然后我爸就急了，然后就说“明天你也不用去做饭了”。然后就走了，去我爷爷家睡了。</p>
<p>其实我知道我妈劝我爸也是在关心他，但是她的语气和说话的方式确实让人不太舒服，光音量就比平时高许多，然后又是以一种异常嫌弃的语气说出来。这样即使是关心，恐怕我爸也会很生气，更何况我爸的脾气，，，</p>
<p>所以我爸走了之后，我就劝我妈，问她有没有考虑过换一种语气和说话方式，尽量温和一些。因为我知道我妈的神经是比较敏感的，之前我爸还和我说你妈最近好像更年期症状有点明显，所以我劝她的时候也是尽量委婉温和，甚至是一步一步诱导，但是我妈似乎已经完全失去了理智，三句话不到又开始对奶奶的吐槽，但是我有几次也快受不了的时候，我还是告诉自己“也许是她以前承受的太多了”，还是继续坚持劝说，给她分析她的目的，但她不当的说话方式所造成的效果；也拿自己类比，问她如果以后她也生活不方便，然后我媳妇让我不要理她的时候，我该不该听她的话？她又说自己不会那样，然后又问我“你说你自己听不听她的话？” 我沉默了。我想：如果她真的明白自己问我这个问题意味着什么的话，她是不会问的吧。我也明白了，我根本没办法跟她讲道理，她也不会和我讲道理，或许她也不是不明白这些道理，只是以前受的委屈，由此而对公婆的恨已经压过了所谓道德。</p>
<p>以前他俩因为爷爷奶奶那边的事情吵架的时候，我总幻想着，等我长大了，我要带着爸妈离开这个鬼地方，忘记发生过的所有，忘记这里所有的人，快乐的生活。现在我快长大了吧，社会的现实却正准备给我当头一棒，呵呵。</p>
<p>在我觉得劝说我妈无法获得效果的时候，我低下头，手扶着额头，哭了。我想，我妈一定也年轻过，一定也对这个世界充满希望过，可生活却让她变成了这幅模样。平时她也很关心我们爷俩，但一涉及到我爷奶的事，她就不能保持理智了。细想一下，她这些年，一直在家里，做饭、做家务、种地、有时去服装厂打一段工，也没有什么爱好，可能就喜欢看看电视，手机上也就看看今日头条，没出过我们市，去的最远的就是去我舅家走亲戚了。想到这里，我觉得生活对她太不公平了，但我却甚至没办法让她的心态平和，更别说去拯救她了。我真的好没用啊。</p>
<p>我的心理也足够健康吗？</p>
<h2 id="2021-02-06"><a href="#2021-02-06" class="headerlink" title="2021/02/06"></a>2021/02/06</h2><p>下午我爸去讨要工资回来，结果还是没找到人。不过已经决定和工友一起去劳动保障局寻求帮助，据以前的朋友说有效。</p>
<p>这下两个人都挺开心的。</p>
<p>我也很开心，以前我多次劝过他，他终于决定走法律途径了。😄</p>
<h2 id="2021-02-09-吵：在哪里吃年夜饭"><a href="#2021-02-09-吵：在哪里吃年夜饭" class="headerlink" title="2021/02/09 吵：在哪里吃年夜饭"></a>2021/02/09 吵：在哪里吃年夜饭</h2><p>让你妈我真他妈的受够了，cao。<br>每次过年都要吵，吵你麻痹啊。</p>
<p>现在在家里一看到他俩说话我的心都在嗓子眼上，怕下一秒两个人就要吵起来，战战兢兢的，现在感觉自己像个sb变态了草。</p>
<p>从我记事起就吵，吵吵吵吵吵，还他妈吵，两个人都他妈不会长大的吗，不能尊重理解我的话拜托你们能不能互相尊重理解一下。下次过年死外边都不回家，吗的</p>
<h2 id="2021-02-10-大早上又开始吵"><a href="#2021-02-10-大早上又开始吵" class="headerlink" title="2021/02/10 大早上又开始吵"></a>2021/02/10 大早上又开始吵</h2><p>我们这里过年一般会在年前油炸一些东西（鱼、面丸子之类的）准备年前年后吃，昨天我爸说在我奶家炸东西我妈不同意吵，今天我爸把鱼拿回来炸我妈不知道又咋了，两个人又开始吵，，，没几句又开始翻旧帐，，，又是</p>
<p>以前这种时候我还会劝几句，这次我已经懒得劝了。劝也没用。</p>
<p>我妈说话一开腔就是想吵架的语气，我和她说了好多次她都不听，不知道是不是心里的怨气太重，到了那个时候控制不住自己。然而我爸听了她那些话还真就当真了，那次还跟我说你妈最近更年期挺严重的，经常背着他骂他。那你平时就不能考虑到她是更年期忍让几句话吗？非得和她争论。而且我妈平时就喜欢自言自语一个人抱怨，我也分不清是不是更年期的问题了。</p>
<p>我就问我妈最近睡眠怎么样，我妈说睡不着，睡一两个小时后就醒过来，呆一个小时才能睡过去。我觉得真的可能是更年期。但是如果直接跟她说她更年期去看医生的话，照她的脾气，估计得骂起我来，但一直这样下去也不是办法，怎么办呢？</p>
<p>我知道语气只是表面问题，可真正的问题，长期以来承受的东西，是我能解决的吗？</p>
<h2 id="2021-02-12-这些年以来过得最平和的除夕和春节"><a href="#2021-02-12-这些年以来过得最平和的除夕和春节" class="headerlink" title="2021/02/12 这些年以来过得最平和的除夕和春节"></a>2021/02/12 这些年以来过得最平和的除夕和春节</h2><p>昨天年三十中午和大伯家一起在爷爷家吃了饭，气氛一直很祥和，没有僵掉，可能因为堂哥家的双胞胎女儿挺可爱的，都不忍心破坏这气氛吧。一直到晚上都很开心。大伯一家人是下午就走了，我和爸妈在爷爷家吃完了年夜饭后，我和我妈就回家了，因为家里也得做一些传统的仪式（上供之类的），爸爸因为要照顾老年痴呆的爷爷和不愿意动弹的奶奶得留下来。</p>
<h2 id="2021-02-13"><a href="#2021-02-13" class="headerlink" title="2021/02/13"></a>2021/02/13</h2><p>我爸说喝酒是为了麻醉自己，听了好心痛，想以各种“正确”的言论（对身体的危害；麻醉也无用，要面对现实）劝他，又说不出口了。</p>
<h2 id="2021-02-14-思绪很乱，很悲观"><a href="#2021-02-14-思绪很乱，很悲观" class="headerlink" title="2021/02/14 思绪很乱，很悲观"></a>2021/02/14 思绪很乱，很悲观</h2><p>吃完饭看到央视3套的一个歌舞选秀节目，一个在中央舞剧院任职的小伙子跳了一个古典舞，跳得特别好，各种高难度动作，舞剑，气质也是超群，跟评委说他是来拿第一的，从来都是拿第一，台下的竞争者也都说他是“天之骄子”，甄子丹问他说那他有没有输过，他说没有。他的那种自信、脸上的笑容，一定是没遇到过挫折吧，真是幸福。</p>
<p>他大概还没我大吧。我想到了自己，因为从小干农活右肩劳损，现在只是坐着时间长了也会痛，健身的时候更不敢用太大的重量，打羽毛球一会就痛；还有左膝，以前骑摩托车的时候摔过一次，当时只觉得擦破了点皮，当时家里我妈也没有坚持让我去医院检查，可能我们都怕花钱吧。以至于现在久站膝盖疼，运动也会疼，以后再治疗也不知道会怎么样。如果我们家的条件稍微好一点，会不会我们当时就有就医的意识了呢？而这个小伙子，他的身体是那么的自如，我真的好嫉妒啊。不过我也不会怪自己的父母，那不是他们的责任，是这个环境。如果我怪他们的话，那他们也应该怪自己的父母吗？那就没有尽头了，没有任何意义。真要怪就怪自己不如别人投胎能力强吧。</p>
<p>在家这几天，总是接触到关于婚姻、孩子的话题。就我现在的想法来说，我是不想有孩子的，因为自己本来就是从最底层出来的，在最美好的青春里，我感觉失去了太多，不只是物质，还有精神上，也许我没有过所谓“青春”吧。所以我想在以后的日子里补偿自己，去体验那些可能性、那更加丰富的生活。还有一个原因：养育孩子的成本太大了。即使我以后有不错的收入，我怎么在保证自己和父母两个家庭的生活质量的同时，再付出那么多的时间、精力、金钱去保证自己的孩子在良好的教育下健康成长呢？</p>
<p>然而现在，看到屏幕上的那个“孩子”，或许又多了一个不愿养育孩子的理由。如果我真的会有孩子，我的孩子也可能会像他那样吧。有着那么多的可能性，我会不会嫉妒ta啊？我曾经不敢想象的，有些人却生来就有可能获得，即使那是我自己的孩子。我求而不得的东西，我会让他轻易得到吗？如果是别人，我可能没有办法阻止，可那是我的孩子，如果我想毁了他，一定是轻而易举吧。还有一种他能轻易得到的东西：父母的理解。我和ta的母亲一定会是敢于拥抱种种可能的人，所以他做什么事我们都会给予理解和支持。那这样，我越是去理解ta，想到自己就会越痛苦吧。所以，不繁衍，于那不存在的ta，于我，都好。</p>
<p>想到这里，看到我爸靠在沙发上睡着了。是在爷爷家照顾爷爷奶奶累的吧，这几天又是照顾他们又是招待亲戚，和我妈也时有口角，整个人都憔悴了很多，在爷爷家的时候我和妈妈也尽量帮他做事。可他心里也是很累吧，今天听他声音都有点哑。中午又喝酒了，我妈都闻到他身上很大酒气。</p>
<p>我爸接到大伯的电话，去了爷爷家。<br>我妈说爸明天要去大舅家走亲戚。说他太固执。说刚才又看他手机发现了什么。<br>我说“妈，你怎么又···你不是说不看了吗？你改了吧。”<br>我低下头，哭了。<br>哭了一会，抬起头，发现我妈捂着脸，好像也哭了。可能看出我肩膀在抖吧。<br>我站起来说“我去睡了，今天不洗脚了”。</p>
<p>我开始觉得我拯救不了他们了···</p>
<h2 id="2021-02-21-鸡飞狗跳的一晚"><a href="#2021-02-21-鸡飞狗跳的一晚" class="headerlink" title="2021/02/21 鸡飞狗跳的一晚"></a>2021/02/21 鸡飞狗跳的一晚</h2><p>见<a href="2021-02-21-Sorry-sir-You-dance-at-the-wrong-place.md">“Sorry, sir. You’re dancing at the wrong place.”</a>.</p>
<p>爸妈，我不会放弃你们的。我会努力让你们的身体和精神都健康。</p>
<p>大光头！刚把得！💪</p>
]]></content>
      <categories>
        <category>family</category>
      </categories>
      <tags>
        <tag>family</tag>
        <tag>parents</tag>
        <tag>emotion</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Get newest code from original repo</title>
    <url>/2021/02/04/Get-newest-code-from-original-repo/</url>
    <content><![CDATA[<p>Clone 开源项目后，在本地进行了修改，并提交到了自己的远程repo，如何从原 git 仓库获取最新的代码并 push 到自己的 repo。<br><a id="more"></a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>从 Github 上看到了一个开源项目，想自己部署，但是由于项目代码中的配置文件需要某软件的账号和 token，而原仓库中由于是开源项目所以是一个公用的账号，而自己部署的话肯定还是得用自己的，这里我选择使用私有仓库，一定程度上防止 token 泄漏。</p>
<p>因为 Fork 后的仓库不能设为私有，我只能先将代码拉取到本地：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Stitchpunk/atari-ai.git test</span><br></pre></td></tr></table></figure></p>
<p>在 Github 上建一个私有仓库，如：<code>test</code>.</p>
<p>在本地仓库中将远程仓库 <code>origin</code> 改为自己私有仓库的地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v <span class="comment"># check remote repo address</span></span></span><br><span class="line">origin  git@github.com:hunterMG/test.git (fetch)</span><br><span class="line">origin  git@github.com:hunterMG/test.git (push)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote remove origin <span class="comment"># remove remote repo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:hunterMG/test.git <span class="comment"># add remote repo of yourself</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master <span class="comment"># push code to your remote repo</span></span></span><br></pre></td></tr></table></figure>
<p>这时候就可以在本地写代码，提交到本地仓库，再 push 到 Github 之后结合一些 CD/CI 的方法部署了。</p>
<h2 id="原-repo-更新代码后如何更新自己的repo"><a href="#原-repo-更新代码后如何更新自己的repo" class="headerlink" title="原 repo 更新代码后如何更新自己的repo"></a>原 repo 更新代码后如何更新自己的repo</h2><p>几天之后新的问题来了：原开源仓库更新了新的 feature ，我想加到自己的仓库里，因为不是直接用 Github 的 Web 端 Fork 的仓库，所以不能用这篇<a href="https://www.cnblogs.com/gqzdev/p/11900362.html" target="_blank" rel="noopener">Github中进行fork后，原仓库更新了如何与原仓库同步</a>里提到的方法（直接在 Web 端发起 PR 从原仓库更新）。</p>
<p>然后看到了这个：<a href="https://juejin.cn/post/6844903761593237511" target="_blank" rel="noopener">GIT - 拉取其他仓库的某个分支的代码</a>, 感觉差不多，试试还真行。</p>
<ol>
<li><p>添加远程 repo，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add Stitchpunk https://github.com/Stitchpunk/atari-ai.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取远程 repo 信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch Stitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建并切换到分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b mergeStitchpunk #or git switch -c mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并最新的代码，解决冲突：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge Stitchpunk/master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="更新自己-repo-主分支的代码"><a href="#更新自己-repo-主分支的代码" class="headerlink" title="更新自己 repo 主分支的代码"></a>更新自己 repo 主分支的代码</h3><ol>
<li><p>切换到 master 分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master #or git switch master</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除临时分支（optional）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d mergeStitchpunk</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>不过现在看来好像可以在第 4 步时直接切换到 master 分支，将代码直接合并到 master 上。😂</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/gqzdev/p/11900362.html" target="_blank" rel="noopener">Github中进行fork后，原仓库更新了如何与原仓库同步</a></p>
<p><a href="https://juejin.cn/post/6844903761593237511" target="_blank" rel="noopener">GIT - 拉取其他仓库的某个分支的代码</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424" target="_blank" rel="noopener">创建与合并分支</a></p>
]]></content>
  </entry>
  <entry>
    <title>fix you</title>
    <url>/2021/02/28/fix-you/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ad2ece2b7b01845d1790126dc070f35db2168bfae20eb330543899819e38bc56"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>psychology</category>
      </categories>
      <tags>
        <tag>emotion</tag>
        <tag>life</tag>
        <tag>psychology</tag>
      </tags>
  </entry>
  <entry>
    <title>批量重命名文件</title>
    <url>/2021/02/07/rename-files-to-numbers-by-file-modification-time/</url>
    <content><![CDATA[<p>用 Shell 脚本重命名文件夹中所有的文件，根据文件的修改时间排序，将文件名改为从 <code>001</code> 开始的数字。根据<a href="/2020/12/26/fix-pcap-ext/index.html">使用shell脚本批量检查pcap文件头并修改文件扩展名</a>中写的脚本修改而来。<br><a id="more"></a></p>
<p>rename.sh :<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Raname file to numbers by file modification time.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arg:  dir path <span class="built_in">where</span> files at.</span></span><br><span class="line">dir=$1</span><br><span class="line">cd $dir</span><br><span class="line">file_num=$(ls -l | wc -l);</span><br><span class="line">echo $file_num</span><br><span class="line">cnt=1</span><br><span class="line">for file in *;</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">    ext=$(ls "$file" | cut -d. -f2)</span><br><span class="line">    mv "$file" $(printf "%03d" $cnt).$ext</span><br><span class="line">    cnt=`expr $cnt + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<p>用法：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rename.sh dir1</span><br></pre></td></tr></table></figure></p>
<p>dir1 是需要批量重命名的文件所在的文件夹路径。</p>
<h2 id="2021-02-16-fix：不能处理含空格的文件名。"><a href="#2021-02-16-fix：不能处理含空格的文件名。" class="headerlink" title="2021/02/16 fix：不能处理含空格的文件名。"></a>2021/02/16 fix：不能处理含空格的文件名。</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-for file in `ls -rt`;</span></span><br><span class="line"><span class="addition">+for file in *;</span></span><br></pre></td></tr></table></figure>
<p>`ls -rt` 会被文件名的空格分割， * 则不会。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"> do</span><br><span class="line">     echo $file</span><br><span class="line"><span class="deletion">-    name=$(ls $file | cut -d. -f1)</span></span><br></pre></td></tr></table></figure>
<p>移除无用代码。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-    ext=$(ls $file | cut -d. -f2)</span></span><br><span class="line"><span class="deletion">-    mv $file $(printf "%03d" $cnt).$ext</span></span><br><span class="line"><span class="addition">+    ext=$(ls "$file" | cut -d. -f2)</span></span><br><span class="line"><span class="addition">+    mv "$file" $(printf "%03d" $cnt).$ext</span></span><br></pre></td></tr></table></figure>
<p>被 <code>&quot;&quot;</code> 包裹的文件名中即使含空格也不需要转义。</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>“Sorry, sir. You&#39;re dancing at the wrong place.”</title>
    <url>/2021/02/21/Sorry-sir-You-dance-at-the-wrong-place/</url>
    <content><![CDATA[<p>标题随便取的，无任何内涵。<br><a id="more"></a></p>
<h2 id="醉酒的“课”"><a href="#醉酒的“课”" class="headerlink" title="醉酒的“课”"></a>醉酒的“课”</h2><h3 id="利用醉酒"><a href="#利用醉酒" class="headerlink" title="利用醉酒"></a>利用醉酒</h3><p>醉酒是一个很好的工具，对于懦弱的人来说。平时不敢说、不好意思说的话，都可以借醉酒说出来，而万一犯了什么错误，也是一句“哎呀我喝多了对不住”，一般情况对方也不会怪ta。（不会吧？不会吧？不会真的有人会怪醉酒的人吧？[doge]）</p>
<h3 id="酒量的作用"><a href="#酒量的作用" class="headerlink" title="酒量的作用"></a>酒量的作用</h3><p>酒量大的人，与酒量小的人比，喝一样多的酒，头脑仍能保持清醒。此时稍以言辞，便将醉酒的人耍得团团乱转（如果醉酒的人本来情商就不高，那对于ta来说更是“神来之笔”）。“享受” 挥洒 “权力”、发泄情绪的 “快感”。<br>（这两种人，哪种更可怜一些呢？）</p>
<p><strong>(PS.以前我的愿望是世界和平，现在我的愿望是消灭酒精。)</strong></p>
<p>(PPS.现在在家里也太废了，整天写这些垃圾东西。)</p>
<p>鸡飞狗跳的一晚结束了，，，</p>
<p>2021/02/21 02:57.</p>
]]></content>
      <categories>
        <category>trash</category>
      </categories>
      <tags>
        <tag>family</tag>
        <tag>emotion</tag>
      </tags>
  </entry>
  <entry>
    <title>connect Wifi in linux via cmd</title>
    <url>/2021/04/22/connect-Wifi-in-linux-via-cmd/</url>
    <content><![CDATA[<p>All cmd run by root.<br><a id="more"></a></p>
<p>create config file via cmd:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_passphrase SSIDofWifi passwordOfWifi &gt; /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure></p>
<p>modify config: /etc/wpa_supplicant/wpa_supplicant<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">ctrl_interface_group=root</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid="theSSID"</span><br><span class="line">    psk=&#123;encoded psk&#125;</span><br><span class="line">    scan_ssid=1 # to connect to a hiden Wifi</span><br><span class="line">    proto=RSN</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">    group=CCMP</span><br><span class="line">    pairwise=CCMP</span><br><span class="line">    priority=10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>connect to specific Wifi:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlp7s0 -B</span><br></pre></td></tr></table></figure></p>
<p>-B: run in background</p>
<p>if failed:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep wpa # get pid of running wpa_supplicant instance</span><br><span class="line">kill -9 &#123;pid&#125;</span><br></pre></td></tr></table></figure></p>
<p>or just:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 wpa[press Tab]</span><br></pre></td></tr></table></figure></p>
<p>get ip add via dhcp:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dhclient</span><br></pre></td></tr></table></figure></p>
<p>todo:<br>wpa_supplicant.service</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/u012503786/article/details/79541811/" target="_blank" rel="noopener">https://blog.csdn.net/u012503786/article/details/79541811/</a><br><a href="https://blog.csdn.net/yunlong654/article/details/88655685" target="_blank" rel="noopener">https://blog.csdn.net/yunlong654/article/details/88655685</a><br><a href="https://blog.csdn.net/u010049696/article/details/48765999" target="_blank" rel="noopener">https://blog.csdn.net/u010049696/article/details/48765999</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
        <tag>Wi-Fi;</tag>
      </tags>
  </entry>
  <entry>
    <title>note of book Android Programming</title>
    <url>/2021/04/25/note-of-book-Android-Programming/</url>
    <content><![CDATA[<p>《Android 编程权威指南 第3版》笔记。<br><a id="more"></a></p>
<h2 id="1-11-挑战练习-定制-toast-消息"><a href="#1-11-挑战练习-定制-toast-消息" class="headerlink" title="1.11 挑战练习:定制 toast 消息"></a>1.11 挑战练习:定制 toast 消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast t = Toast.makeText(QuizActivity.<span class="keyword">this</span>, R.string.correct_toast, Toast.LENGTH_SHORT);</span><br><span class="line">t.setGravity(Gravity.TOP,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">t.show();</span><br></pre></td></tr></table></figure>
<p>Android R(API 30) 之后 setGravity() 对 text 类型的 Toast 不起作用。</p>
<blockquote>
<p>Warning: Starting from Android Build.VERSION_CODES#R, for apps targeting API level Build.VERSION_CODES#R or higher, this method is a no-op when called on text toasts.<br><a href="https://developer.android.com/reference/android/widget/Toast#setGravity(int,%20int,%20int" target="_blank" rel="noopener">https://developer.android.com/reference/android/widget/Toast#setGravity(int,%20int,%20int</a>)</p>
</blockquote>
<p>在 logcat 中可看到如下错误：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">E/Toast: setGravity() shouldn't be called on text toasts, the values won't be used</span><br></pre></td></tr></table></figure></p>
<p>将 targetSdkVersion 改为 29 可暂时解决该问题[Doge]。 </p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>fxxk VScode</title>
    <url>/2021/03/05/fxxk-VScode/</url>
    <content><![CDATA[<p>VScode 中设置<code>.tex</code>文件的 snippet 的配置文件是<code>latex.json</code>而不是<code>tex.json</code>!!!💀</p>
]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>VScode</tag>
        <tag>tex</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/10/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Android Programming 3rd Edition Chap 12 Challenge</title>
    <url>/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/</url>
    <content><![CDATA[<p>Android编程权威指南 第3版 第12章 挑战练习。<br><a id="more"></a></p>
<h2 id="挑战练习1-更多对话框"><a href="#挑战练习1-更多对话框" class="headerlink" title="挑战练习1 更多对话框"></a>挑战练习1 更多对话框</h2><p>和 DatePickerFragment 几乎完全一样。</p>
<h2 id="挑战练习2-实现响应式-DialogFragment"><a href="#挑战练习2-实现响应式-DialogFragment" class="headerlink" title="挑战练习2 实现响应式 DialogFragment"></a>挑战练习2 实现响应式 DialogFragment</h2><h3 id="第一、二步就按提示完成。"><a href="#第一、二步就按提示完成。" class="headerlink" title="第一、二步就按提示完成。"></a>第一、二步就按提示完成。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// dialog_date.xml</span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DatePicker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dialog_date_picker"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:calendarViewShown</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/date_ok_button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/button_ok"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal|bottom"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DatePickerFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatePicker mDatePicker;</span><br><span class="line">    <span class="keyword">private</span> Button mOKButton;</span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 获取 CrimeFragment 传给 DatePickerActivity 的 date 数据</span></span><br><span class="line">        mDate = (Date) getActivity().getIntent().getSerializableExtra(EXTRA_DATE);</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate:"</span> + mDate.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateView:"</span> + mDate.toString());</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(mDate);</span><br><span class="line">        <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">        <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        View v = inflater.inflate(R.layout.dialog_date, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">        mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, hour, minute, second).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 CrimeFragment 返回用户修改的 date 数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        getActivity().setResult(resultCode, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerActivity</span> <span class="keyword">extends</span> <span class="title">SingleFragmentActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE= <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Fragment <span class="title">createFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于 CrimeFragment 调用，传递 date 数据给 DatePickerFragment</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context packageContext, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(packageContext, DatePickerActivity.class);</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 修改启动方式</span></span><br><span class="line">        Intent intent = DatePickerActivity.newIntent(getActivity(), mCrime.getDate());</span><br><span class="line">        startActivityForResult(intent, REQUEST_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// onActivityResult 无需修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(resultCode != Activity.RESULT_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == REQUEST_DATE)&#123;</span><br><span class="line">        Date date = (Date) data.getSerializableExtra(DatePickerFragment.EXTRA_DATE);</span><br><span class="line">        mCrime.setDate(date);</span><br><span class="line">        updateDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三步-涉及-第17章"><a href="#第三步-涉及-第17章" class="headerlink" title="第三步 涉及 第17章"></a>第三步 涉及 第17章</h3><p>按17章的步骤修改代码，不考虑新建Crime和数据库部分，可使 CrimeList 和 Crime明细 在平板上显示在屏幕两侧。</p>
<p>但是第二步把 DatePicker 托管到 Activity 了，现在启动DatePicker 都是打开一个 Activity 充满屏幕，所以改成判断设备是手机还是平板，决定启动 DatePickerFragment 的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是手机启动Activity, 若是平板启动对话框 （参考第17章</span></span><br><span class="line">        <span class="keyword">if</span>(getActivity().findViewById(R.id.detail_fragment_container) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Intent intent = DatePickerActivity.newIntent(getActivity(), mCrime.getDate());</span><br><span class="line">            startActivityForResult(intent, REQUEST_DATE);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            FragmentManager manager = getFragmentManager();</span><br><span class="line">            DatePickerFragment dialog = DatePickerFragment.newInstance(mCrime.getDate());</span><br><span class="line">            dialog.setTargetFragment(CrimeFragment.<span class="keyword">this</span>, REQUEST_DATE);</span><br><span class="line">            dialog.show(manager, DIALOG_DATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在在平板上就会显示对话框了，但是按 DatePicker 的OK按钮后，CrimeFragment 的日期却不更新。</p>
<p>通过 Logcat 发现，sendResult() 里发送的就是原来的date，怎么回事呢？</p>
<p>之前自己为了方便，实现第二步的时候，用新建 Activity 的方式启动 DatePicker 这个页面，我直接把 onCreateDialog() 里的代码 copy 到了 onCreateView() 里，只改动了 这里：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java -- onCreateView()</span></span><br><span class="line">mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">        <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">        <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">        Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, hour, minute, second).getTime();</span><br><span class="line">        sendResult(Activity.RESULT_OK, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>而在onCreateDialog里的是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java -- onCreateDialog()</span></span><br><span class="line">mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">        .setView(v)</span><br><span class="line">        .setTitle(R.string.time_picker_title)</span><br><span class="line">        .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure>
<p>通过在生命周期函数里打 log 发现如下生命周期调用顺序：</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled.png" alt="平板"></p>
<p>平板</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled%201.png" alt="手机"></p>
<p>手机</p>
<p>onCreateView() 在两种方式启动时都会调用，而<strong>手机启动 Activity时不会调用 onCreateDialog() 方法。</strong></p>
<p>所以在平板上没返回修改后的 date 应该是mDatePicker init了两次导致的，所以在 onCreateView() 里做一个判断，如果 mDatePicker不为空的话，再对其进行 findViewById 和 init：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DatePickerFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatePicker mDatePicker;</span><br><span class="line">    <span class="keyword">private</span> Button mOKButton;</span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mYear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMonth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHour;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMinute;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSecond;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建对话框 Fragment 时用 arguments 传递信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatePickerFragment <span class="title">newInstance</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putSerializable(DatePickerFragment.ARG_DATE, date);</span><br><span class="line"></span><br><span class="line">        DatePickerFragment fragment = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate called"</span>);</span><br><span class="line">        <span class="comment">// Activity 方式启动时获取 date 信息</span></span><br><span class="line">        Date date = (Date) getActivity().getIntent().getSerializableExtra(EXTRA_DATE);</span><br><span class="line">        <span class="keyword">if</span>(date != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDate = date;</span><br><span class="line">            Log.d(TAG, <span class="string">"intent:"</span> + mDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对话框方式启动时获取 date 信息</span></span><br><span class="line">        <span class="keyword">if</span>(getArguments() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDate = (Date) getArguments().getSerializable(DatePickerFragment.ARG_DATE);</span><br><span class="line">            Log.d(TAG, <span class="string">"arguments:"</span> + mDate.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(mDate);</span><br><span class="line">        mYear = calendar.get(Calendar.YEAR);</span><br><span class="line">        mMonth = calendar.get(Calendar.MONTH);</span><br><span class="line">        mDay = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        mHour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        mMinute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        mSecond = calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Activity 时不会调用该方法</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateDialog"</span>);</span><br><span class="line"></span><br><span class="line">        View v = LayoutInflater.from(getActivity())</span><br><span class="line">                .inflate(R.layout.dialog_date, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对话框方式不显示多余的 OK 按钮</span></span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setVisibility(View.INVISIBLE);</span><br><span class="line"></span><br><span class="line">        mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">        mDatePicker.init(mYear, mMonth, mDay, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">                .setView(v)</span><br><span class="line">                .setTitle(R.string.time_picker_title)</span><br><span class="line">                .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                        <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                        <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                        Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                        sendResult(Activity.RESULT_OK, date);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Activity 时调用</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreateView called"</span>);</span><br><span class="line"></span><br><span class="line">        View v = inflater.inflate(R.layout.dialog_date, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 避免因重新 init 而使在平板上不能返回修改后的 date 给 CrimeFragment</span></span><br><span class="line">        <span class="keyword">if</span>(mDatePicker == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDatePicker = v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">            mDatePicker.init(mYear, mMonth, mDay, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mOKButton = v.findViewById(R.id.date_ok_button);</span><br><span class="line">        mOKButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">                <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">                <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">                Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day, mHour, mMinute, mSecond).getTime();</span><br><span class="line">                sendResult(Activity.RESULT_OK, date);</span><br><span class="line">                getActivity().finish();<span class="comment">// 按确定后直接返回上一界面--CrimeFragment</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回date给CrimeFragment，要判断两种方式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        Log.d(CrimeFragment.TAG, <span class="string">"sendDate:"</span>+ date.toString());</span><br><span class="line">        <span class="keyword">if</span>(getTargetFragment() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            getActivity().setResult(resultCode, intent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled.gif" alt="平板设备显示对话框"></p>
<p>平板设备显示对话框</p>
<p><img src="/2022/07/04/Android-Programming-3rd-Edition-Chap-12-Challenge/Untitled%201.gif" alt="手机设备显示全屏 Activity"></p>
<p>手机设备显示全屏 Activity</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>使用shell脚本批量检查pcap文件头并修改文件扩展名</title>
    <url>/2020/12/26/fix-pcap-ext/</url>
    <content><![CDATA[<p>最近在使用一个数据集时遇到了一个问题，正常 .pcap 文件的文件头是 <code>0xa1b2c3d4</code>, 但该数据集中的部分 .pcap 文件的文件头却是 .pcapng 文件的 <code>0x0a0d0d0a</code>, 将文件的扩展名更改即可，否则用 dpkt 包处理时会出错。（具体原因见<a href="https://stackoverflow.com/questions/23523524/dpkt-invalid-tcpdump-header-error" target="_blank" rel="noopener">dpkt invalid tcpdump header error</a>）,所以实现一个脚本来检查 .pcap 文件的文件头并修改错误文件的扩展名为 <code>.pcapng</code>.<br><a id="more"></a></p>
<p>批量检查pcap文件头并改正的脚本: <code>fixPcapExt.sh</code><br>参数：放置pcap文件的目录<br>思路：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">遍历目录中的文件：  </span><br><span class="line">    如果文件的扩展名是否是`.pcap`：  </span><br><span class="line">        如果文件的前4个字节为`0x0a0d0d0a`:  </span><br><span class="line">            修改文件名</span><br></pre></td></tr></table></figure></p>
<p>实现：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fix wrong pcap file extention.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arg:  dir path <span class="built_in">where</span> pcap files at.</span></span><br><span class="line">dir=$1</span><br><span class="line">cd $dir</span><br><span class="line">for file in `ls .`</span><br><span class="line">    do</span><br><span class="line">    if [ "$&#123;file##*.&#125;"x = "pcap"x ];then</span><br><span class="line">        if [ `hexdump -n 4 -e '4 "%x"' $file`x = "a0d0d0a"x ];then</span><br><span class="line">            echo $file</span><br><span class="line">            name=$(ls $file | cut -d. -f1) </span><br><span class="line">            mv $file "$name".pcapng</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    done</span><br></pre></td></tr></table></figure></p>
<p>要点：</p>
<ol>
<li><p>if [ “${file##*.}”x = “pcap”x ];then   </p>
<p>${file##*.} 是提取文件扩展名，##是贪婪操作符，从左至右匹配，匹配到最右边的.号，移除包含.号的左边内容；<br>x 是防止字符串为空时报错；<br>这一行中的空格都不能去掉，会报错。</p>
</li>
<li><p>`hexdump -n 4 -e ‘4 “%x”‘ $file`</p>
<p> 用hexdump检查前4个字节，并格式化输出</p>
</li>
<li><p>name=$(ls $file | cut -d. -f1) </p>
<p> 提取文件名中的名字部分。<br> <code>cut -d. -f1</code> :提取以点为分隔符的第1部分。  </p>
</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
</search>
